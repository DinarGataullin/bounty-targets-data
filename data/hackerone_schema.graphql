# Autogenerated input type of AcceptInvitation
input AcceptInvitationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
}

# Autogenerated return type of AcceptInvitation
type AcceptInvitationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  me: User
}

# Autogenerated input type of AcknowledgeProgramHealthAcknowledgement
input AcknowledgeProgramHealthAcknowledgementInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  program_health_acknowledgement_id: ID!
}

# Autogenerated return type of AcknowledgeProgramHealthAcknowledgement
type AcknowledgeProgramHealthAcknowledgementPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_program_health_acknowledgement_id: ID
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# A Activities::AgreedOnGoingPublic activity for a report
type ActivitiesAgreedOnGoingPublic implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  first_to_agree: Boolean!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BountyAwarded activity for a report
type ActivitiesBountyAwarded implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  bonus_amount: String
  bounty_amount: String
  bounty_currency: String
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BountySuggested activity for a report
type ActivitiesBountySuggested implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  bonus_amount: String
  bounty_amount: String
  bounty_currency: String
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugCloned activity for a report
type ActivitiesBugCloned implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  original_report: Report
  original_report_id: Int
  report: Report
  updated_at: DateTime!
}

# A Activities::BugDuplicate activity for a report
type ActivitiesBugDuplicate implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  original_report: Report
  original_report_id: Int
  report: Report
  updated_at: DateTime!
}

# A Activities::BugFiled activity for a report
type ActivitiesBugFiled implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugInactive activity for a report
type ActivitiesBugInactive implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugInformative activity for a report
type ActivitiesBugInformative implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugNeedsMoreInfo activity for a report
type ActivitiesBugNeedsMoreInfo implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugNew activity for a report
type ActivitiesBugNew implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugNotApplicable activity for a report
type ActivitiesBugNotApplicable implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugReopened activity for a report
type ActivitiesBugReopened implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugResolved activity for a report
type ActivitiesBugResolved implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugSpam activity for a report
type ActivitiesBugSpam implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::BugTriaged activity for a report
type ActivitiesBugTriaged implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ChangedScope activity for a report
type ActivitiesChangedScope implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  new_scope: StructuredScope
  old_scope: StructuredScope
  report: Report
  updated_at: DateTime!
}

# A Activities::Comment activity for a report
type ActivitiesComment implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::CommentsClosed activity for a report
type ActivitiesCommentsClosed implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::CveIdAdded activity for a report
type ActivitiesCveIdAdded implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  cve_ids: [String]
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ExternalAdvisoryAdded activity for a report
type ActivitiesExternalAdvisoryAdded implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ExternalUserInvitationCancelled activity for a report
type ActivitiesExternalUserInvitationCancelled implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  email: String
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ExternalUserInvited activity for a report
type ActivitiesExternalUserInvited implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  email: String
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ExternalUserJoined activity for a report
type ActivitiesExternalUserJoined implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  duplicate_report: Report
  duplicate_report_id: Int
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ExternalUserRemoved activity for a report
type ActivitiesExternalUserRemoved implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  removed_user: User!
  report: Report
  updated_at: DateTime!
}

# A Activities::GroupAssignedToBug activity for a report
type ActivitiesGroupAssignedToBug implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  assigned_group: TeamMemberGroup
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  group: TeamMemberGroup
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::HackerRequestedMediation activity for a report
type ActivitiesHackerRequestedMediation implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ManuallyDisclosed activity for a report
type ActivitiesManuallyDisclosed implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::MediationRequested activity for a report
type ActivitiesMediationRequested implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# An Activities::NobodyAssignedToBug activity for a report
type ActivitiesNobodyAssignedToBug implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::NotEligibleForBounty activity for a report
type ActivitiesNotEligibleForBounty implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ProgramInactive activity for a report
type ActivitiesProgramInactive implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReassignedToTeam activity for a report
type ActivitiesReassignedToTeam implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReferenceIdAdded activity for a report
type ActivitiesReferenceIdAdded implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  reference: String
  reference_url: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportBecamePublic activity for a report
type ActivitiesReportBecamePublic implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportCollaboratorInvited activity for a report
type ActivitiesReportCollaboratorInvited implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportCollaboratorJoined activity for a report
type ActivitiesReportCollaboratorJoined implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportSeverityUpdated activity for a report
type ActivitiesReportSeverityUpdated implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportTitleUpdated activity for a report
type ActivitiesReportTitleUpdated implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  new_title: String!
  old_title: String!
  report: Report
  updated_at: DateTime!
}

# A Activities::ReportVulnerabilityTypesUpdated activity for a report
type ActivitiesReportVulnerabilityTypesUpdated implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  new_weakness: Weakness
  old_weakness: Weakness
  report: Report
  updated_at: DateTime!
}

# A Activities::SwagAwarded activity for a report
type ActivitiesSwagAwarded implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  swag: Swag!
  updated_at: DateTime!
}

# A Activities::TeamPublished activity for a team
type ActivitiesTeamPublished implements ActivityInterface & Node {
  _id: ID!
  actor: ActorUnion
  created_at: DateTime!
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  updated_at: DateTime!
}

# A Activities::UserAssignedToBug activity for a report
type ActivitiesUserAssignedToBug implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  assigned_user: User!
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::UserBannedFromProgram activity for a report
type ActivitiesUserBannedFromProgram implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  removed_user: User!
  report: Report
  updated_at: DateTime!
}

# A Activities::UserCompletedRetest activity for a report
type ActivitiesUserCompletedRetest implements ActivityInterface & Node & ReportActivityInterface {
  _id: ID!
  actor: ActorUnion
  attachments: [Attachment]
  automated_response: Boolean
  created_at: DateTime!
  genius_execution_id: ID
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  report: Report
  updated_at: DateTime!
}

# A Activities::UserJoined activity for a user
type ActivitiesUserJoined implements ActivityInterface & Node {
  _id: ID!
  actor: ActorUnion
  created_at: DateTime!
  i_can_edit: Boolean!
  id: ID!
  internal: Boolean
  markdown_message: String
  message: String
  updated_at: DateTime!
}

# The connection type for ActivityUnion.
type ActivityConnection {
  # A list of edges.
  edges: [ActivityUnionEdge]
  max_updated_at: DateTime

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# A interface for the common fields on an HackerOne Activity
interface ActivityInterface {
  _id: ID!
  actor: ActorUnion
  created_at: DateTime!
  i_can_edit: Boolean!
  internal: Boolean
  markdown_message: String
  message: String
  updated_at: DateTime!
}

# Fields on which a collection of activities can be ordered
enum ActivityOrderField {
  created_at
  updated_at
}

input ActivityOrderInput {
  direction: OrderDirection!
  field: ActivityOrderField!
}

# Possible types for an activity
enum ActivityTypes {
  AgreedOnGoingPublic
  BountyAwarded
  BountySuggested
  BugCloned
  BugDuplicate
  BugFiled
  BugInactive
  BugInformative
  BugNeedsMoreInfo
  BugNew
  BugNotApplicable
  BugReopened
  BugResolved
  BugSpam
  BugTriaged
  ChangedScope
  Comment
  CommentsClosed
  CveIdAdded
  ExternalAdvisoryAdded
  ExternalUserInvitationCancelled
  ExternalUserInvited
  ExternalUserJoined
  ExternalUserRemoved
  GroupAssignedToBug
  HackerRequestedMediation
  ManuallyDisclosed
  MediationRequested
  NobodyAssignedToBug
  NotEligibleForBounty
  ProgramInactive
  ReassignedToTeam
  ReferenceIdAdded
  ReportBecamePublic
  ReportCollaboratorInvited
  ReportCollaboratorJoined
  ReportSeverityUpdated
  ReportTitleUpdated
  ReportVulnerabilityTypesUpdated
  SwagAwarded
  TeamPublished
  UserAssignedToBug
  UserBannedFromProgram
  UserCompletedRetest
  UserJoined
}

# Activities can be of multiple types
union ActivityUnion = ActivitiesAgreedOnGoingPublic | ActivitiesBountyAwarded | ActivitiesBountySuggested | ActivitiesBugCloned | ActivitiesBugDuplicate | ActivitiesBugFiled | ActivitiesBugInactive | ActivitiesBugInformative | ActivitiesBugNeedsMoreInfo | ActivitiesBugNew | ActivitiesBugNotApplicable | ActivitiesBugReopened | ActivitiesBugResolved | ActivitiesBugSpam | ActivitiesBugTriaged | ActivitiesChangedScope | ActivitiesComment | ActivitiesCommentsClosed | ActivitiesCveIdAdded | ActivitiesExternalAdvisoryAdded | ActivitiesExternalUserInvitationCancelled | ActivitiesExternalUserInvited | ActivitiesExternalUserJoined | ActivitiesExternalUserRemoved | ActivitiesGroupAssignedToBug | ActivitiesHackerRequestedMediation | ActivitiesManuallyDisclosed | ActivitiesMediationRequested | ActivitiesNobodyAssignedToBug | ActivitiesNotEligibleForBounty | ActivitiesProgramInactive | ActivitiesReassignedToTeam | ActivitiesReferenceIdAdded | ActivitiesReportBecamePublic | ActivitiesReportCollaboratorInvited | ActivitiesReportCollaboratorJoined | ActivitiesReportSeverityUpdated | ActivitiesReportTitleUpdated | ActivitiesReportVulnerabilityTypesUpdated | ActivitiesSwagAwarded | ActivitiesTeamPublished | ActivitiesUserAssignedToBug | ActivitiesUserBannedFromProgram | ActivitiesUserCompletedRetest | ActivitiesUserJoined

# An edge in a connection.
type ActivityUnionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ActivityUnion
}

# The actor of an activity can be multiple types
union ActorUnion = Team | User

# A HackerOne user's address used for submitting swag
type Address implements Node {
  _id: ID!
  city: String!
  country: String!
  created_at: DateTime!
  id: ID!
  name: String!
  phone_number: String
  postal_code: String!
  state: String!
  street: String!
  tshirt_size: TshirtSizeEnum
}

# An SLA snapshot aggregate
type AggregatedSlaSnapshot {
  average_time_to_bounty_awarded: Float
  average_time_to_first_program_response: Float
  average_time_to_report_resolved: Float
  average_time_to_report_triage: Float
  timestamp: DateTime!
}

# Autogenerated input type of ArchiveStructuredScope
input ArchiveStructuredScopeInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  structured_scope_id: ID!
}

# Autogenerated return type of ArchiveStructuredScope
type ArchiveStructuredScopePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  query: Query
  structured_scope: StructuredScope
}

# Report can be assigned to either a user or a team member group
union AssigneeUnion = TeamMemberGroup | User

# A HackerOne attachment for a report
type Attachment implements Node {
  _id: ID!
  content_type: String!
  created_at: DateTime!
  expiring_url: String!
  file_name: String!
  file_size: Int!
  id: ID!
}

# Types of authentication methods for users
enum AuthenticationServiceEnum {
  database
  saml
  token
}

# A HackerOne badge
type Badge implements Node {
  _id: ID!
  description: String!
  id: ID!
  image_path: String!
  name: String!
}

# Represents a badge earned by a user
type BadgesUsers implements Node {
  _id: ID!
  badge: Badge!
  created_at: DateTime!
  id: ID!
  user: User!
}

# The connection type for BadgesUsers.
type BadgesUsersConnection {
  # A list of edges.
  edges: [BadgesUsersEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BadgesUsersEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: BadgesUsers
}

# Resources for setting up the Bank Transfer payment method
type BankTransferReference implements Node {
  beneficiary_required_details(bank_account_country: String!, beneficiary_country: String!, currency: String!): BeneficiaryRequiredDetail
  countries: [Country]
  currencies: [Currency]
  id: ID!
}

# A specification of information needed to create a bank transfer payment preference
type BeneficiaryRequiredDetail implements Node {
  bank_account_country: String!
  beneficiary_country: String!
  beneficiary_required_details(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BeneficiaryRequiredDetailsConnection
  currency: String!
  id: ID!
}

input BeneficiaryRequiredDetailInput {
  field: String!
  value: String!
}

# A specification of the possibilities for creating a bank transfer payout preference
type BeneficiaryRequiredDetails implements Node {
  beneficiary_entity_type: String!
  beneficiary_required_fields(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BeneficiaryRequiredFieldConnection
  description: String!
  fee: String!
  id: ID!
  payment_type: String!
}

# The connection type for BeneficiaryRequiredDetails.
type BeneficiaryRequiredDetailsConnection {
  # A list of edges.
  edges: [BeneficiaryRequiredDetailsEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BeneficiaryRequiredDetailsEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: BeneficiaryRequiredDetails
}

# A specification of the format of a field used to create a bank transfer payout preference
type BeneficiaryRequiredField implements Node {
  description: String!
  field: String!
  id: ID!
  regex: String!
}

# The connection type for BeneficiaryRequiredField.
type BeneficiaryRequiredFieldConnection {
  # A list of edges.
  edges: [BeneficiaryRequiredFieldEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BeneficiaryRequiredFieldEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: BeneficiaryRequiredField
}

input BooleanPredicateInput {
  _eq: Boolean
  _is_null: Boolean
  _neq: Boolean
}

# A HackerOne bounty for a report
type Bounty implements Node {
  _id: ID!
  amount: String!
  awarded_amount: String!
  awarded_bonus_amount: String!
  awarded_currency: String!
  bonus_amount: String!
  created_at: DateTime!
  id: ID!
  report: Report!
  status: BountyStatusEnum!
}

# The connection type for Bounty.
type BountyConnection {
  average_amount: Float!

  # A list of edges.
  edges: [BountyEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_amount: Float!
  total_count: Int!
}

# An edge in a connection.
type BountyEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Bounty
}

# Status which reflect the state of a bounty
enum BountyStatusEnum {
  cancelled
  confirmed
  external_payment
  failed
  failed_ofac_check
  hold
  needs_payout_method
  needs_tax_form
  no_mileage_account
  no_status
  no_tax_form
  ofac_reject
  pending
  pending_ofac_check
  rejected
  sent
}

# BountyTable
type BountyTable implements Node & ResourceInterface {
  _id: ID!
  bounty_table_rows(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BountyTableRowConnection
  critical_label: String!
  description: String
  description_html: String
  high_label: String!
  id: ID!
  low_label: String!
  medium_label: String!
  team: Team!
  url: URI!
}

# BountyTableRow
type BountyTableRow implements Node & ResourceInterface {
  _id: ID!
  critical: Int
  high: Int
  id: ID!
  low: Int
  medium: Int
  structured_scope: StructuredScope
  url: URI!
}

# The connection type for BountyTableRow.
type BountyTableRowConnection {
  # A list of edges.
  edges: [BountyTableRowEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type BountyTableRowEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: BountyTableRow
}

input BountyTableRowInput {
  critical: Int
  destroy: Boolean
  high: Int
  id: ID
  low: Int
  maximum: Int
  medium: Int
  structured_scope_id: ID
}

# Autogenerated input type of CancelTwoFactorAuthenticationReset
input CancelTwoFactorAuthenticationResetInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  token: String!
}

# Autogenerated return type of CancelTwoFactorAuthenticationReset
type CancelTwoFactorAuthenticationResetPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  success: Boolean!
  was_successful: Boolean!
}

# Challenge setting of a Team
type ChallengeSetting implements Node {
  id: ID!
  policy: String
}

# Autogenerated input type of ClaimCredential
input ClaimCredentialInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of ClaimCredential
type ClaimCredentialPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of ClaimReport
input ClaimReportInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
}

# Autogenerated return type of ClaimReport
type ClaimReportPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  report: Report
  was_successful: Boolean!
}

# A subset of weaknesses that share a common characteristic
type Cluster implements Node {
  created_at: DateTime!
  description: String
  id: ID!
  name: String!
  updated_at: DateTime!
  weaknesses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: WeaknessOrder = {direction: ASC, field: name}
    search: String = null
  ): ClusterWeaknessConnection
}

# The connection type for Cluster.
type ClusterConnection {
  # A list of edges.
  edges: [ClusterEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ClusterEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Cluster
}

input ClusterOrder {
  direction: OrderDirection!
  field: ClusterOrderField!
}

# Fields on which a collection of Cluster can be ordered
enum ClusterOrderField {
  BROWSING_FRIENDLY
}

# The connection type for Weakness.
type ClusterWeaknessConnection {
  # A list of edges.
  edges: [ClusterWeaknessEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ClusterWeaknessEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Weakness
  team_weakness(team_handle: String!): TeamWeakness
}

# A Coinbase Payout Preference
type CoinbasePayoutPreferenceType implements Node & PayoutPreferenceInterface {
  _id: ID!
  default: Boolean
  email: String
  id: ID!
}

# A common response
type CommonResponse implements Node {
  # The primary key from the database
  _id: ID!
  created_at: DateTime!
  id: ID!
  message: String!
  team: Team!
  title: String!
  updated_at: DateTime!
}

# The connection type for CommonResponse.
type CommonResponseConnection {
  # A list of edges.
  edges: [CommonResponseEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type CommonResponseEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CommonResponse
}

input CommonResponseOrder {
  direction: OrderDirection!
  field: CommonResponseOrderField!
}

# Fields on which a collection of common responses can be ordered
enum CommonResponseOrderField {
  title
}

# Autogenerated input type of CompleteReportRetestUser
input CompleteReportRetestUserInput {
  answered_can_be_reproduced: Boolean!
  answered_fix_can_be_bypassed: Boolean!
  attachment_ids: [ID]
  bypass_report_id: Int

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  database_report_id: ID!
  message: String!
}

# Autogenerated return type of CompleteReportRetestUser
type CompleteReportRetestUserPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  report_retest_user: ReportRetestUser
  was_successful: Boolean!
}

# Will only return values for valid SeverityRatingEnum and null.
scalar CountBySeverity

# A country as specified in ISO 3166
type Country implements Node {
  alpha2: String!
  currency_code: String
  id: ID!
  name: String!
}

# Autogenerated input type of CreateActivityComment
input CreateActivityCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  internal: Boolean!
  message: String!
  report_id: ID!
}

# Autogenerated return type of CreateActivityComment
type CreateActivityCommentPayload implements MutationResult {
  activities: ActivityConnection
  activity: ActivitiesComment

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_activity: ActivityUnionEdge
  report: Report
  was_successful: Boolean!
}

# Autogenerated input type of CreateBounty
input CreateBountyInput {
  amount: Float
  bonus_amount: Float

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of CreateBounty
type CreateBountyPayload implements MutationResult {
  bounty: Bounty

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# Autogenerated input type of CreateBountySuggestion
input CreateBountySuggestionInput {
  amount: Float
  bonus_amount: Float

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of CreateBountySuggestion
type CreateBountySuggestionPayload {
  activity: ActivitiesBountySuggested!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of CreateCoinbasePayoutPreference
input CreateCoinbasePayoutPreferenceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coinbase_email: String!
  default_method: Boolean!
}

# Autogenerated return type of CreateCoinbasePayoutPreference
type CreateCoinbasePayoutPreferencePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateCurrencycloudBankTransferPayoutPreference
input CreateCurrencycloudBankTransferPayoutPreferenceInput {
  bank_account_country: String!
  bank_account_holder_name: String!
  beneficiary_entity_type: CurrencycloudBankTransferEntityType!
  beneficiary_required_details: [BeneficiaryRequiredDetailInput]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  currency: String!
  default_method: Boolean!
  payment_type: CurrencycloudBankTransferPaymentType!
}

# Autogenerated return type of CreateCurrencycloudBankTransferPayoutPreference
type CreateCurrencycloudBankTransferPayoutPreferencePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateCveRequest
input CreateCveRequestInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  description: String!
  product: String!
  product_version: String!
  references: [String]
  report_id: Int
  team_handle: String!
  vulnerability_discovered_at: String!
  weakness_name: String!
}

# Autogenerated return type of CreateCveRequest
type CreateCveRequestPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  cve_requests: CveRequestsConnection
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_cve_request: CveRequestEdge
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of CreateExternalReport
input CreateExternalReportInput {
  attachment_ids: [ID]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  hacker_requested_team_name: String
  hacker_summary: String!
  handle: String!
  reported_date: DateTime
  resolved_date: DateTime
  title: String!
  vulnerability_information: String
}

# Autogenerated return type of CreateExternalReport
type CreateExternalReportPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_report: ReportEdge
  reports: ReportConnection
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of CreateIssueTrackerReferenceId
input CreateIssueTrackerReferenceIdInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  reference: String!
  report_id: ID!
}

# Autogenerated return type of CreateIssueTrackerReferenceId
type CreateIssueTrackerReferenceIdPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of CreateJiraOauthUrl
input CreateJiraOauthUrlInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  site: String!
  team_id: ID!
}

# Autogenerated return type of CreateJiraOauthUrl
type CreateJiraOauthUrlPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team: Team
  url: String
}

# Autogenerated input type of CreateJiraWebhookToken
input CreateJiraWebhookTokenInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of CreateJiraWebhookToken
type CreateJiraWebhookTokenPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team!
  webhook_url: String!
}

# Autogenerated input type of CreateLeaveProgramSurveyAnswer
input CreateLeaveProgramSurveyAnswerInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  feedback: String
  structured_response_ids: [ID]!
  team_handle: String!
}

# Autogenerated return type of CreateLeaveProgramSurveyAnswer
type CreateLeaveProgramSurveyAnswerPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateMailingAddress
input CreateMailingAddressInput {
  city: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  country: String!
  name: String!
  phone_number: String!
  postal_code: String!
  state: String!
  street: String!
}

# Autogenerated return type of CreateMailingAddress
type CreateMailingAddressPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateOrUpdateHackeroneToJiraEventsConfiguration
input CreateOrUpdateHackeroneToJiraEventsConfigurationInput {
  assignee_changes: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comments: Boolean
  public_disclosures: Boolean
  rewards: Boolean
  state_changes: Boolean
  team_id: ID!
}

# Autogenerated return type of CreateOrUpdateHackeroneToJiraEventsConfiguration
type CreateOrUpdateHackeroneToJiraEventsConfigurationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team!
}

# Autogenerated input type of CreateOrUpdateJiraIntegration
input CreateOrUpdateJiraIntegrationInput {
  assignee: String
  base_url: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  custom: String
  description: String!
  generate_webhook_in_jira_if_does_not_exist: Boolean
  issue_type: Int!
  labels: String
  pid: Int!
  summary: String!
  team_id: ID!
}

# Autogenerated return type of CreateOrUpdateJiraIntegration
type CreateOrUpdateJiraIntegrationPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of CreatePaypalPreference
input CreatePaypalPreferenceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  default_method: Boolean!
  paypal_email: String!
}

# Autogenerated return type of CreatePaypalPreference
type CreatePaypalPreferencePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateProgramBounty
input CreateProgramBountyInput {
  amount: Float!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  program_id: ID!
  recipient: String!
  reference: String!
  title: String!
}

# Autogenerated return type of CreateProgramBounty
type CreateProgramBountyPayload {
  bounty: Bounty

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of CreateRejectionSurveyAnswer
input CreateRejectionSurveyAnswerInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  feedback: String
  invitation_token: String
  structured_response_ids: [ID]!
}

# Autogenerated return type of CreateRejectionSurveyAnswer
type CreateRejectionSurveyAnswerPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateReport
input CreateReportInput {
  asset_identifier: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  facebook_user_id: String!
  severity: String
  team_handle: String!
  title: String!
  vulnerability_information: String!
}

# Autogenerated return type of CreateReport
type CreateReportPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  report: Report
  was_successful: Boolean!
}

# Autogenerated input type of CreateReportSummary
input CreateReportSummaryInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  content: String!
  report_id: ID!
}

# Autogenerated return type of CreateReportSummary
type CreateReportSummaryPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  report_summary: Summary
  was_successful: Boolean!
}

# Autogenerated input type of CreateSlackPipeline
input CreateSlackPipelineInput {
  channel: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  descriptive_label: String
  notification_report_agreed_on_going_public: Boolean!
  notification_report_assignee_changed: Boolean!
  notification_report_became_public: Boolean!
  notification_report_bounty_paid: Boolean!
  notification_report_bounty_suggested: Boolean!
  notification_report_bug_closed_as_spam: Boolean!
  notification_report_bug_duplicate: Boolean!
  notification_report_bug_informative: Boolean!
  notification_report_bug_needs_more_info: Boolean!
  notification_report_bug_new: Boolean!
  notification_report_bug_not_applicable: Boolean!
  notification_report_closed_as_resolved: Boolean!
  notification_report_comments_closed: Boolean!
  notification_report_created: Boolean!
  notification_report_internal_comment_added: Boolean!
  notification_report_manually_disclosed: Boolean!
  notification_report_not_eligible_for_bounty: Boolean!
  notification_report_public_comment_added: Boolean!
  notification_report_reopened: Boolean!
  notification_report_swag_awarded: Boolean!
  notification_report_triaged: Boolean!
  team_id: ID!
}

# Autogenerated return type of CreateSlackPipeline
type CreateSlackPipelinePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_slack_pipeline: SlackPipelineEdge
  slack_pipelines: SlackPipelineConnection
  team: Team!
  was_successful: Boolean!
}

# Autogenerated input type of CreateStructuredScope
input CreateStructuredScopeInput {
  asset_identifier: String!
  asset_type: StructuredScopedAssetTypeEnum
  availability_requirement: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  confidentiality_requirement: String
  eligible_for_bounty: Boolean
  eligible_for_submission: Boolean
  instruction: String
  integrity_requirement: String
  reference: String
  team_id: ID!
}

# Autogenerated return type of CreateStructuredScope
type CreateStructuredScopePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of CreateSwag
input CreateSwagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of CreateSwag
type CreateSwagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  swag: Swag!
}

# Autogenerated input type of CreateTaxForm
input CreateTaxFormInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  type: TaxFormTypeEnum!
}

# Autogenerated return type of CreateTaxForm
type CreateTaxFormPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of CreateTrigger
input CreateTriggerInput {
  action_message: String!
  action_type: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  expression_operator: String!
  expressions: [ExpressionInput]!
  team_id: ID!
}

# Autogenerated return type of CreateTrigger
type CreateTriggerPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_trigger: TriggerEdge
  team: Team
  triggers: TriggerConnection
  was_successful: Boolean!
}

# Autogenerated input type of CreateTwoFactorAuthenticationCredentials
input CreateTwoFactorAuthenticationCredentialsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateTwoFactorAuthenticationCredentials
type CreateTwoFactorAuthenticationCredentialsPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  two_factor_authentication_credentials: TwoFactorAuthenticationCredentials
  was_successful: Boolean!
}

# Autogenerated input type of CreateUserBountiesReport
input CreateUserBountiesReportInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateUserBountiesReport
type CreateUserBountiesReportPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# Autogenerated input type of CreateUserLufthansaAccount
input CreateUserLufthansaAccountInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  first_name: String!
  last_name: String!
  number: String!
}

# Autogenerated return type of CreateUserLufthansaAccount
type CreateUserLufthansaAccountPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# Autogenerated input type of CreateUserTwoFactorReset
input CreateUserTwoFactorResetInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  fingerprint: String!
  password: String!
}

# Autogenerated return type of CreateUserTwoFactorReset
type CreateUserTwoFactorResetPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  success: Boolean!
  was_successful: Boolean!
}

# Autogenerated input type of CreateVpnCredentials
input CreateVpnCredentialsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateVpnCredentials
type CreateVpnCredentialsPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Credentials of a team
type Credential implements Node {
  _id: ID!
  account_details: String
  credentials: Hash
  id: ID!
  revoked: Boolean!
  user: User
}

# The connection type for Credential.
type CredentialConnection {
  # A list of edges.
  edges: [CredentialEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type CredentialEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Credential
}

# A currency as defined by ISO 4217
type Currency implements Node {
  code: String!
  id: ID!
  name: String!
}

# Possible currencies codes for bounties
enum CurrencyCode {
  USD
  XLA
}

# Different entity types for currencycloud payout preferences
enum CurrencycloudBankTransferEntityType {
  company
  individual
}

# Different payment types for currencycloud payout preferences
enum CurrencycloudBankTransferPaymentType {
  priority
  regular
}

# A CurrencyCloud Bank Transfer Payout Preference
type CurrencycloudBankTransferPayoutPreferenceType implements Node & PayoutPreferenceInterface {
  _id: ID!
  default: Boolean
  id: ID!
  name: String
}

# A request for a CVE
type CveRequest implements Node & ResourceInterface {
  _id: ID!
  created_at: DateTime
  cve_identifier: String
  description: String
  id: ID!
  latest_state_change_reason: String
  owner: User!
  product: String
  product_version: String
  references: [String]
  report: Report
  state: CveRequestStateEnum!
  team: Team!
  updated_at: DateTime
  url: URI!
  vulnerability_discovered_at: DateTime
  weakness: Weakness
}

# An edge in a connection.
type CveRequestEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: CveRequest
}

# States of a CVE Request
enum CveRequestStateEnum {
  cancelled
  draft
  hackerone_approved
  mitre_approved
  pending_hackerone_approval
  pending_mitre_approval
}

# The connection type for CveRequest.
type CveRequestsConnection {
  # A list of edges.
  edges: [CveRequestEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# Converts a date to iso8601
scalar DateTime

# Autogenerated input type of DeleteBiDirectionalJiraIntegration
input DeleteBiDirectionalJiraIntegrationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of DeleteBiDirectionalJiraIntegration
type DeleteBiDirectionalJiraIntegrationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team
}

# Autogenerated input type of DeleteJiraWebhook
input DeleteJiraWebhookInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  jira_webhook_id: ID!
}

# Autogenerated return type of DeleteJiraWebhook
type DeleteJiraWebhookPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team
}

# Autogenerated input type of DeleteMailingAddress
input DeleteMailingAddressInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteMailingAddress
type DeleteMailingAddressPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of DeletePhabricatorIntegration
input DeletePhabricatorIntegrationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of DeletePhabricatorIntegration
type DeletePhabricatorIntegrationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team
}

# Autogenerated input type of DeleteSlackPipeline
input DeleteSlackPipelineInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  slack_pipeline_id: String!
}

# Autogenerated return type of DeleteSlackPipeline
type DeleteSlackPipelinePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_slack_pipeline_id: ID
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of DeleteTeamMember
input DeleteTeamMemberInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_member_id: ID!
}

# Autogenerated return type of DeleteTeamMember
type DeleteTeamMemberPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_team_member_id: ID
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of DeleteTeamSlackIntegration
input DeleteTeamSlackIntegrationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  slack_integration_id: ID!
}

# Autogenerated return type of DeleteTeamSlackIntegration
type DeleteTeamSlackIntegrationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team
}

# Autogenerated input type of DeleteTrigger
input DeleteTriggerInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  trigger_id: ID!
}

# Autogenerated return type of DeleteTrigger
type DeleteTriggerPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_trigger_id: ID
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of DeleteUserLufthansaAccount
input DeleteUserLufthansaAccountInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteUserLufthansaAccount
type DeleteUserLufthansaAccountPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# Autogenerated input type of DeleteUserSession
input DeleteUserSessionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user_session_id: ID!
}

# Autogenerated return type of DeleteUserSession
type DeleteUserSessionPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  user_session: UserSession
  was_successful: Boolean!
}

# The connection type for Weakness.
type DeprecatedTeamWeaknessConnection {
  # A list of edges.
  edges: [DeprecatedTeamWeaknessEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type DeprecatedTeamWeaknessEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Weakness
  team_weakness: TeamWeakness
}

# Autogenerated input type of DestroyTwoFactorAuthenticationCredentials
input DestroyTwoFactorAuthenticationCredentialsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  otp_code: String!
  password: String!
}

# Autogenerated return type of DestroyTwoFactorAuthenticationCredentials
type DestroyTwoFactorAuthenticationCredentialsPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of DismissProgramHealthAcknowledgement
input DismissProgramHealthAcknowledgementInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  program_health_acknowledgement_id: ID!
}

# Autogenerated return type of DismissProgramHealthAcknowledgement
type DismissProgramHealthAcknowledgementPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_program_health_acknowledgement_id: ID
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Allowed domains for embedded submission forms
type EmbeddedSubmissionDomain {
  _id: ID!
  created_by: User
  domain: String!
  id: ID!
  team: Team
}

# The connection type for EmbeddedSubmissionDomain.
type EmbeddedSubmissionDomainConnectionType {
  # A list of edges.
  edges: [EmbeddedSubmissionDomainEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type EmbeddedSubmissionDomainEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EmbeddedSubmissionDomain
}

# Embedded submission form
type EmbeddedSubmissionForm implements Node {
  id: ID!
  team: Team!
  uuid: String
}

# The connection type for EmbeddedSubmissionForm.
type EmbeddedSubmissionFormConnectionType {
  # A list of edges.
  edges: [EmbeddedSubmissionFormEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type EmbeddedSubmissionFormEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EmbeddedSubmissionForm
}

# Autogenerated input type of EnableUser
input EnableUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of EnableUser
type EnableUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# An error
type Error implements Node {
  field: String
  id: ID!
  message: String!
  type: ErrorTypeEnum!
}

# The connection type for Error.
type ErrorConnection {
  # A list of edges.
  edges: [ErrorEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ErrorEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Error
}

# Types of errors that can occur
enum ErrorTypeEnum {
  ARGUMENT
  AUTHORIZATION
  THROTTLE
}

# Trigger Expression
type Expression implements Node {
  _id: ID!
  id: ID!
  left_value: String!
  operand: String!
  right_value: String!
  trigger: Trigger!
}

# The connection type for Expression.
type ExpressionConnection {
  # A list of edges.
  edges: [ExpressionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ExpressionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Expression
}

input ExpressionInput {
  left_value: ExpressionLeftFieldEnum!
  operand: ExpressionOperandEnum!
  right_value: String!
}

# Types of left fields that an expression can have
enum ExpressionLeftFieldEnum {
  any_field
  report_body
  report_title
  report_weakness
}

# Types of operands that an expression can have
enum ExpressionOperandEnum {
  contains
  does_not_contain
}

# An External Program
type ExternalProgram implements Node {
  # The primary key from the database
  _id: ID!
  about: String
  handle: String!

  # ID of the object.
  id: ID!
  name: String!
  profile_picture(size: ProfilePictureSizes!): String!
  team: Team
}

# The connection type for ExternalProgram.
type ExternalProgramConnection {
  # A list of edges.
  edges: [ExternalProgramEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ExternalProgramEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ExternalProgram
}

# A HackerOne feature
type Feature implements Node {
  _id: ID!
  enabled: Boolean!
  id: ID!
  key: String!
}

input FiltersExternalProgramFilterInput {
  id: IntPredicateInput
  name: StringPredicateInput
  offers_rewards: BooleanPredicateInput
  policy: StringPredicateInput
  website: StringPredicateInput
}

input FiltersReportFilterRootInput {
  _and: [FiltersReportFilterRootInput]
  _or: [FiltersReportFilterRootInput]
  id: IntPredicateInput
  substate: ReportStateEnumPredicateInput
  team: FiltersTeamFilterInput
  title: StringPredicateInput
  vulnerability_information: StringPredicateInput
  weakness: FiltersWeaknessFilterInput
}

input FiltersStructuredScopeFilterInput {
  asset_identifier: StringPredicateInput
  asset_type: StructuredScopedAssetTypeEnumPredicateInput
  id: IntPredicateInput
}

input FiltersTeamFilterInput {
  bookmarked_team_users: FiltersUserFilterInput
  external_program: FiltersExternalProgramFilterInput
  handle: StringPredicateInput
  id: IntPredicateInput
  internet_bug_bounty: BooleanPredicateInput
  name: StringPredicateInput
  offers_bounties: BooleanPredicateInput
  policy: StringPredicateInput
  state: TeamStatePredicateInput
  structured_scopes: FiltersStructuredScopeFilterInput
  submission_state: SubmissionStateEnumPredicateInput
  website: StringPredicateInput
  whitelisted_hackers: FiltersUserFilterInput
}

input FiltersTeamFilterRootInput {
  _and: [FiltersTeamFilterRootInput]
  _or: [FiltersTeamFilterRootInput]
  bookmarked_team_users: FiltersUserFilterInput
  external_program: FiltersExternalProgramFilterInput
  handle: StringPredicateInput
  id: IntPredicateInput
  internet_bug_bounty: BooleanPredicateInput
  name: StringPredicateInput
  offers_bounties: BooleanPredicateInput
  policy: StringPredicateInput
  state: TeamStatePredicateInput
  structured_scopes: FiltersStructuredScopeFilterInput
  submission_state: SubmissionStateEnumPredicateInput
  website: StringPredicateInput
  whitelisted_hackers: FiltersUserFilterInput
}

input FiltersUserFilterInput {
  id: IntPredicateInput
  is_me: Boolean
}

input FiltersWeaknessFilterInput {
  id: IntPredicateInput
  name: StringPredicateInput
}

# Autogenerated input type of ForgetFacebookCredential
input ForgetFacebookCredentialInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ForgetFacebookCredential
type ForgetFacebookCredentialPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of GenerateTaxFormUrl
input GenerateTaxFormUrlInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of GenerateTaxFormUrl
type GenerateTaxFormUrlPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# Invitation settings for users
type HackerInvitationsProfile implements Node {
  bounty_programs_only: Boolean
  id: ID!
  managed_programs_only: Boolean
  min_bounty: Float
  receive_invites: Boolean
}

# A HackeronePayroll Payout Preference
type HackeronePayrollPayoutPreferenceType implements Node & PayoutPreferenceInterface {
  _id: ID!
  default: Boolean
  email: String
  id: ID!
}

# Configuration for the events sent from HackerOne to JIRA
type HackeroneToJiraEventsConfiguration implements Node {
  assignee_changes: Boolean!
  comments: Boolean!
  id: ID!
  public_disclosures: Boolean!
  rewards: Boolean!
  state_changes: Boolean!
  team: Team!
}

scalar Hash

input IntPredicateInput {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

# An interface for the common fields on a HackerOne Invitation
interface InvitationInterface {
  _id: ID!
}

# Fields on which a collection of Invitation can be ordered
enum InvitationOrderField {
  invitation_expires_at
}

input InvitationOrderInput {
  direction: OrderDirection!
  field: InvitationOrderField!
}

# User invitation preference type
enum InvitationPreferenceTypeEnum {
  always
  bounty_only
  never
}

# A HackerOne invitation queue slot earned by a hacker
type InvitationQueue implements Node {
  _id: ID!
  id: ID!
}

# The connection type for InvitationQueue.
type InvitationQueueConnection {
  # A list of edges.
  edges: [InvitationQueueEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type InvitationQueueEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: InvitationQueue
}

# Invitation source types
enum InvitationSourceEnum {
  automatic_invite
  facebook_invite
  h14420_invite
  manual_invite
  manual_skillset_invitation
  preview_hacker_matching_invite
  priority_queue_invite
  recommended_program_enroll
  report_draft_invite
  saml_provisioning_invite
  system_invite
  unknown_invite
}

# States an invitation can be in
enum InvitationStateEnum {
  accepted
  cancelled
  expired
  open
  pending_terms
  rejected
}

# Invitations can be of multiple types
union InvitationUnion = InvitationsSoftLaunch

# The connection type for InvitationUnion.
type InvitationUnionConnection {
  # A list of edges.
  edges: [InvitationUnionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type InvitationUnionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: InvitationUnion
}

# An invitation to join a private team as a hacker
type InvitationsSoftLaunch implements InvitationInterface & Node {
  _id: ID!
  expires_at: DateTime
  id: ID!
  markdown_message: String
  message: String
  source: InvitationSourceEnum
  state: InvitationStateEnum
  team: Team!
  token: String
}

# An edge in a connection.
type InvitationsSoftLaunchEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: InvitationsSoftLaunch
}

# A JIRA integration for a team
type JiraIntegration implements Node {
  assignee: String
  base_url: String!
  created_at: DateTime!
  custom: String
  description: String!
  id: ID!
  issue_type: Int!
  labels: String
  pid: Int!
  summary: String!
  team: Team!
  updated_at: DateTime!
}

# A JIRA Oauth for a team
type JiraOauth implements Node {
  # Assignables for a project
  assignables(project_id: Int!): [Hash]
  configured: Boolean!
  created_at: DateTime!
  id: ID!
  issue_types: [Hash]
  jwt: Boolean!
  projects: [Hash]
  site: String
  team: Team!
  updated_at: DateTime!
}

# A JIRA webhook for a team
type JiraWebhook implements Node {
  created_at: DateTime!
  id: ID!
  last_event_received_at: DateTime
  last_token_issued_at: DateTime
  process_assignee_change: Boolean!
  process_comment_add: Boolean!
  process_priority_change: Boolean!
  process_resolution_change: Boolean!
  process_status_change: Boolean!
  team: Team!
  updated_at: DateTime!
}

# Autogenerated input type of LaunchTeam
input LaunchTeamInput {
  amount_researchers: Int
  bcc_me: Boolean
  cancel_invites: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
  invitation_message: String
  new_invites: [String]
}

# Autogenerated return type of LaunchTeam
type LaunchTeamPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  sent: Int!
  skipped: Int!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of LaunchTeamPublicly
input LaunchTeamPubliclyInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
}

# Autogenerated return type of LaunchTeamPublicly
type LaunchTeamPubliclyPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of LeavePrivateProgram
input LeavePrivateProgramInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
}

# Autogenerated return type of LeavePrivateProgram
type LeavePrivateProgramPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of LockReport
input LockReportInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
}

# Autogenerated return type of LockReport
type LockReportPayload implements MutationResult {
  activities: ActivityConnection
  activity: ActivitiesComment

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  new_activity: ActivityUnionEdge
  report: Report
  was_successful: Boolean!
}

# Settings for a user's Lufthansa Account
type LufthansaAccount implements Node {
  created_at: DateTime!
  first_name: String!
  id: ID!
  last_name: String!
  number: String!
  updated_at: DateTime!
}

# Autogenerated input type of MarkReportAsNeedsMoreInfo
input MarkReportAsNeedsMoreInfoInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String!
  report_id: ID!
}

# Autogenerated return type of MarkReportAsNeedsMoreInfo
type MarkReportAsNeedsMoreInfoPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  query: Query
  report: Report
  was_successful: Boolean!
}

# Autogenerated input type of MarkReportAsNoise
input MarkReportAsNoiseInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String!
  report_id: ID!
}

# Autogenerated return type of MarkReportAsNoise
type MarkReportAsNoisePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  query: Query
  report: Report
  was_successful: Boolean!
}

# Autogenerated input type of MarkReportAsSignal
input MarkReportAsSignalInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of MarkReportAsSignal
type MarkReportAsSignalPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  query: Query
  report: Report
  was_successful: Boolean!
}

input MembershipOrder {
  direction: OrderDirection!
  field: MembershipOrderField!
}

# Fields on which a collection of Memberships can be ordered
enum MembershipOrderField {
  TEAM_NAME
}

type Mutation {
  acceptInvitation(input: AcceptInvitationInput!): AcceptInvitationPayload
  acknowledgeProgramHealthAcknowledgement(input: AcknowledgeProgramHealthAcknowledgementInput!): AcknowledgeProgramHealthAcknowledgementPayload
  archiveStructuredScope(input: ArchiveStructuredScopeInput!): ArchiveStructuredScopePayload
  cancelTwoFactorAuthenticationReset(input: CancelTwoFactorAuthenticationResetInput!): CancelTwoFactorAuthenticationResetPayload
  claimCredential(input: ClaimCredentialInput!): ClaimCredentialPayload
  claimReport(input: ClaimReportInput!): ClaimReportPayload
  completeReportRetestUser(input: CompleteReportRetestUserInput!): CompleteReportRetestUserPayload
  createActivityComment(input: CreateActivityCommentInput!): CreateActivityCommentPayload
  createBounty(input: CreateBountyInput!): CreateBountyPayload
  createBountySuggestion(input: CreateBountySuggestionInput!): CreateBountySuggestionPayload
  createCoinbasePayoutPreference(input: CreateCoinbasePayoutPreferenceInput!): CreateCoinbasePayoutPreferencePayload
  createCurrencycloudBankTransferPayoutPreference(input: CreateCurrencycloudBankTransferPayoutPreferenceInput!): CreateCurrencycloudBankTransferPayoutPreferencePayload
  createCveRequest(input: CreateCveRequestInput!): CreateCveRequestPayload
  createExternalReport(input: CreateExternalReportInput!): CreateExternalReportPayload
  createIssueTrackerReferenceId(input: CreateIssueTrackerReferenceIdInput!): CreateIssueTrackerReferenceIdPayload
  createJiraOauthUrl(input: CreateJiraOauthUrlInput!): CreateJiraOauthUrlPayload
  createJiraWebhookToken(input: CreateJiraWebhookTokenInput!): CreateJiraWebhookTokenPayload
  createLeaveProgramSurveyAnswer(input: CreateLeaveProgramSurveyAnswerInput!): CreateLeaveProgramSurveyAnswerPayload
  createMailingAddress(input: CreateMailingAddressInput!): CreateMailingAddressPayload
  createOrUpdateHackeroneToJiraEventsConfiguration(input: CreateOrUpdateHackeroneToJiraEventsConfigurationInput!): CreateOrUpdateHackeroneToJiraEventsConfigurationPayload
  createOrUpdateJiraIntegration(input: CreateOrUpdateJiraIntegrationInput!): CreateOrUpdateJiraIntegrationPayload
  createPaypalPreference(input: CreatePaypalPreferenceInput!): CreatePaypalPreferencePayload
  createProgramBounty(input: CreateProgramBountyInput!): CreateProgramBountyPayload
  createRejectionSurveyAnswer(input: CreateRejectionSurveyAnswerInput!): CreateRejectionSurveyAnswerPayload
  createReport(input: CreateReportInput!): CreateReportPayload
  createReportSummary(input: CreateReportSummaryInput!): CreateReportSummaryPayload
  createSlackPipeline(input: CreateSlackPipelineInput!): CreateSlackPipelinePayload
  createStructuredScope(input: CreateStructuredScopeInput!): CreateStructuredScopePayload
  createSwag(input: CreateSwagInput!): CreateSwagPayload
  createTaxForm(input: CreateTaxFormInput!): CreateTaxFormPayload
  createTrigger(input: CreateTriggerInput!): CreateTriggerPayload
  createTwoFactorAuthenticationCredentials(input: CreateTwoFactorAuthenticationCredentialsInput!): CreateTwoFactorAuthenticationCredentialsPayload
  createUserBountiesReport(input: CreateUserBountiesReportInput!): CreateUserBountiesReportPayload
  createUserLufthansaAccount(input: CreateUserLufthansaAccountInput!): CreateUserLufthansaAccountPayload
  createUserTwoFactorReset(input: CreateUserTwoFactorResetInput!): CreateUserTwoFactorResetPayload
  createVpnCredentials(input: CreateVpnCredentialsInput!): CreateVpnCredentialsPayload
  deleteBiDirectionalJiraIntegration(input: DeleteBiDirectionalJiraIntegrationInput!): DeleteBiDirectionalJiraIntegrationPayload
  deleteJiraWebhook(input: DeleteJiraWebhookInput!): DeleteJiraWebhookPayload
  deleteMailingAddress(input: DeleteMailingAddressInput!): DeleteMailingAddressPayload
  deletePhabricatorIntegration(input: DeletePhabricatorIntegrationInput!): DeletePhabricatorIntegrationPayload
  deleteSlackPipeline(input: DeleteSlackPipelineInput!): DeleteSlackPipelinePayload
  deleteTeamMember(input: DeleteTeamMemberInput!): DeleteTeamMemberPayload
  deleteTeamSlackIntegration(input: DeleteTeamSlackIntegrationInput!): DeleteTeamSlackIntegrationPayload
  deleteTrigger(input: DeleteTriggerInput!): DeleteTriggerPayload
  deleteUserLufthansaAccount(input: DeleteUserLufthansaAccountInput!): DeleteUserLufthansaAccountPayload
  deleteUserSession(input: DeleteUserSessionInput!): DeleteUserSessionPayload
  destroyTwoFactorAuthenticationCredentials(input: DestroyTwoFactorAuthenticationCredentialsInput!): DestroyTwoFactorAuthenticationCredentialsPayload
  dismissProgramHealthAcknowledgement(input: DismissProgramHealthAcknowledgementInput!): DismissProgramHealthAcknowledgementPayload
  enableUser(input: EnableUserInput!): EnableUserPayload
  forgetFacebookCredentials(input: ForgetFacebookCredentialInput!): ForgetFacebookCredentialPayload
  generateTaxFormUrl(input: GenerateTaxFormUrlInput!): GenerateTaxFormUrlPayload
  launchTeam(input: LaunchTeamInput!): LaunchTeamPayload
  launchTeamPublicly(input: LaunchTeamPubliclyInput!): LaunchTeamPubliclyPayload
  leavePrivateProgram(input: LeavePrivateProgramInput!): LeavePrivateProgramPayload
  lockReport(input: LockReportInput!): LockReportPayload
  markReportAsNeedsMoreInfo(input: MarkReportAsNeedsMoreInfoInput!): MarkReportAsNeedsMoreInfoPayload
  markReportAsNoise(input: MarkReportAsNoiseInput!): MarkReportAsNoisePayload
  markReportAsSignal(input: MarkReportAsSignalInput!): MarkReportAsSignalPayload
  programHealthAcknowledgementSeen(input: ProgramHealthAcknowledgementSeenInput!): ProgramHealthAcknowledgementSeenPayload
  publishPolicy(input: PublishPolicyInput!): PublishPolicyPayload
  rejectInvitation(input: RejectInvitationInput!): RejectInvitationPayload
  removeBountyTable(input: RemoveBountyTableInput!): RemoveBountyTablePayload
  revokeCredential(input: RevokeCredentialInput!): RevokeCredentialPayload
  unclaimReport(input: UnclaimReportInput!): UnclaimReportPayload
  updateAccountRecoveryPhoneNumber(input: UpdateAccountRecoveryPhoneNumberInput!): UpdateAccountRecoveryPhoneNumberPayload
  updateAssigneeToGroup(input: UpdateAssigneeToGroupInput!): UpdateAssigneeToGroupPayload
  updateAssigneeToNobody(input: UpdateAssigneeToNobodyInput!): UpdateAssigneeToNobodyPayload
  updateAssigneeToUser(input: UpdateAssigneeToUserInput!): UpdateAssigneeToUserPayload
  updateAutomaticInvites(input: UpdateAutomaticInvitesInput!): UpdateAutomaticInvitesPayload
  updateBookmarkedTeam(input: UpdateBookmarkedTeamInput!): UpdateBookmarkedTeamPayload
  updateBountyTable(input: UpdateBountyTableInput!): UpdateBountyTablePayload
  updateChallengeSetting(input: UpdateChallengeSettingInput!): UpdateChallengeSettingPayload
  updateCredentialAccountDetails(input: UpdateCredentialAccountDetailInput!): UpdateCredentialAccountDetailPayload
  updateCredentialInstruction(input: UpdateCredentialInstructionInput!): UpdateCredentialInstructionPayload
  updateCveRequest(input: UpdateCveRequestInput!): UpdateCveRequestPayload
  updateEmbeddedSubmissionDomains(input: UpdateEmbeddedSubmissionDomainInput!): UpdateEmbeddedSubmissionDomainPayload
  updateFacebookUserId(input: UpdateFacebookUserIdInput!): UpdateFacebookUserIdPayload
  updateInvitationPreferences(input: UpdateInvitationPreferencesInput!): UpdateInvitationPreferencesPayload
  updateJiraWebhook(input: UpdateJiraWebhookInput!): UpdateJiraWebhookPayload
  updateLastViewedNewFeaturesAt(input: UpdateLastViewedNewFeaturesAtInput!): UpdateLastViewedNewFeaturesAtPayload
  updateMe(input: UpdateMeInput!): UpdateMePayload
  updatePhabricatorIntegration(input: UpdatePhabricatorIntegrationInput!): UpdatePhabricatorIntegrationPayload
  updateReportCloseComments(input: UpdateReportCloseCommentsInput!): UpdateReportCloseCommentsPayload
  updateReportStateToDuplicate(input: UpdateReportStateToDuplicateInput!): UpdateReportStateToDuplicatePayload
  updateReportStateToInformative(input: UpdateReportStateToInformativeInput!): UpdateReportStateToInformativePayload
  updateReportStateToNeedsMoreInfo(input: UpdateReportStateToNeedsMoreInfoInput!): UpdateReportStateToNeedsMoreInfoPayload
  updateReportStateToNew(input: UpdateReportStateToNewInput!): UpdateReportStateToNewPayload
  updateReportStateToNotApplicable(input: UpdateReportStateToNotApplicableInput!): UpdateReportStateToNotApplicablePayload
  updateReportStateToResolved(input: UpdateReportStateToResolvedInput!): UpdateReportStateToResolvedPayload
  updateReportStateToSpam(input: UpdateReportStateToSpamInput!): UpdateReportStateToSpamPayload
  updateReportStateToTriaged(input: UpdateReportStateToTriagedInput!): UpdateReportStateToTriagedPayload
  updateReportStructuredScope(input: UpdateReportStructuredScopeInput!): UpdateReportStructuredScopePayload
  updateReportTitle(input: UpdateReportTitleInput!): UpdateReportTitlePayload
  updateSingleBookmarkedTeam(input: UpdateSingleBookmarkedTeamInput!): UpdateSingleBookmarkedTeamPayload
  updateSlackPipeline(input: UpdateSlackPipelineInput!): UpdateSlackPipelinePayload
  updateSlackUser(input: UpdateSlackUserInput!): UpdateSlackUserPayload
  updateStructuredPolicy(input: UpdateStructuredPolicyInput!): UpdateStructuredPolicyPayload
  updateStructuredScope(input: UpdateStructuredScopeInput!): UpdateStructuredScopePayload
  updateSubmissionRequirements(input: UpdateSubmissionRequirementInput!): UpdateSubmissionRequirementPayload
  updateTeamAllowsPrivateDisclosure(input: UpdateTeamAllowsPrivateDisclosureInput!): UpdateTeamAllowsPrivateDisclosurePayload
  updateTeamCriticalSubmissionState(input: UpdateTeamCriticalSubmissionStateInput!): UpdateTeamCriticalSubmissionStatePayload
  updateTeamFancySlackIntegration(input: UpdateTeamFancySlackIntegrationInput!): UpdateTeamFancySlackIntegrationPayload
  updateTeamMemberVisibility(input: UpdateTeamMemberVisibilityInput!): UpdateTeamMemberVisibilityPayload
  updateTeamResponseSla(input: UpdateTeamResponseSlaInput!): UpdateTeamResponseSlaPayload
  updateTeamSubmissionState(input: UpdateTeamSubmissionStateInput!): UpdateTeamSubmissionStatePayload
  updateTeamSubscription(input: UpdateTeamSubscriptionInput!): UpdateTeamSubscriptionPayload
  updateTeamSuccessGoals(input: UpdateTeamSuccessGoalsInput!): UpdateTeamSuccessGoalsPayload
  updateTeamTriageNote(input: UpdateTeamTriageNoteInput!): UpdateTeamTriageNotePayload
  updateTeamWeakness(input: UpdateTeamWeaknessInput!): UpdateTeamWeaknessPayload
  updateTrigger(input: UpdateTriggerInput!): UpdateTriggerPayload
  updateTwoFactorAuthenticationBackupCodes(input: UpdateTwoFactorAuthenticationBackupCodesInput!): UpdateTwoFactorAuthenticationBackupCodesPayload
  updateTwoFactorAuthenticationCredentials(input: UpdateTwoFactorAuthenticationCredentialsInput!): UpdateTwoFactorAuthenticationCredentialsPayload
  updateUserEmail(input: UpdateUserEmailInput!): UpdateUserEmailPayload
  updateUserLufthansaAccount(input: UpdateUserLufthansaAccountInput!): UpdateUserLufthansaAccountPayload
  updateUserPassword(input: UpdateUserPasswordInput!): UpdateUserPasswordPayload
  verifyAccountRecoveryPhoneNumber(input: VerifyAccountRecoveryPhoneNumberInput!): VerifyAccountRecoveryPhoneNumberPayload
}

interface MutationResult {
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# A feature notification for all users
type NewFeatureNotification implements Node {
  description: String
  id: ID!
  key: String
  name: String
  url: String
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# An OAuth Application that can use a 'Sign in using HackerOne' flow and be given OAuth Access Tokens.
type OauthApplication {
  client_id: String
  name: String
  scopes: [String]
}

# Possible directions for sorting a collection
enum OrderDirection {
  ASC
  DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# The connection type for User.
type ParticipantConnection {
  # A list of edges.
  edges: [ParticipantWithReputationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
  year_range: [Int]
}

# An edge in a connection.
type ParticipantWithReputationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User

  # The participant's rank within the team
  rank: Int

  # The participant's reputation within the team
  reputation: Int
}

# A interface for the common fields on an Payout Preference
interface PayoutPreferenceInterface {
  _id: ID!
  default: Boolean
  id: ID!
}

# A user can have payout preferences for different payment services
union PayoutPreferenceUnion = CoinbasePayoutPreferenceType | CurrencycloudBankTransferPayoutPreferenceType | HackeronePayrollPayoutPreferenceType | PaypalPayoutPreferenceType

# A Paypal Payout Preference
type PaypalPayoutPreferenceType implements Node & PayoutPreferenceInterface {
  _id: ID!
  default: Boolean
  email: String
  id: ID!
}

# All available permissions
enum PermissionEnum {
  program_management
}

# A Phabricator integration for a team
type PhabricatorIntegration implements Node {
  base_url: String
  created_at: DateTime!
  description: String
  id: ID!
  process_h1_comment_added: Boolean!
  process_h1_status_change: Boolean!
  process_phabricator_comment_added: Boolean!
  process_phabricator_status_change: Boolean!
  project_tags: String
  team: Team!
  title: String
  updated_at: DateTime!
}

type Post {
  created_at: DateTime!
  id: ID!
  markdown_message: String
  title: String
}

# An edge in a connection.
type PostEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Post
}

# Product Edition of a Team
type ProductEdition {
  display_name: String!
  hacker_invitations_enabled: Boolean!
  id: ID!
  saas_deal: Boolean!
}

# Profile Metrics snapshot of a Team
type ProfileMetricsSnapshot implements Node {
  bounties_count: Float
  bounties_paid: Float
  id: ID!
  month: Int!
  year: Int!
}

# The connection type for ProfileMetricsSnapshot.
type ProfileMetricsSnapshotConnection {
  # A list of edges.
  edges: [ProfileMetricsSnapshotEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ProfileMetricsSnapshotEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ProfileMetricsSnapshot
}

# Different possible profile picture sizes
enum ProfilePictureSizes {
  # 110x110
  large

  # 82x82
  medium

  # 62x62
  small

  # 260x260
  xtralarge
}

# A program_health_acknowledgement for a team_member
type ProgramHealthAcknowledgement implements Node {
  acknowledged: Boolean
  created_at: DateTime
  dismissed: Boolean
  id: ID!
  reason: ProgramHealthAcknowledgementReasonEnum
  team_member: TeamMember!
}

# The connection type for ProgramHealthAcknowledgement.
type ProgramHealthAcknowledgementConnection {
  # A list of edges.
  edges: [ProgramHealthAcknowledgementEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ProgramHealthAcknowledgementEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ProgramHealthAcknowledgement
}

# reason which reflect the state of a program health acknowledgement
enum ProgramHealthAcknowledgementReasonEnum {
  grace_period
  in_review
  ok
  paused
}

# Autogenerated input type of ProgramHealthAcknowledgementSeen
input ProgramHealthAcknowledgementSeenInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  program_health_acknowledgement_id: ID!
}

# Autogenerated return type of ProgramHealthAcknowledgementSeen
type ProgramHealthAcknowledgementSeenPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of PublishPolicy
input PublishPolicyInput {
  brand_promise: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  organization: String
  preferences: String
  process: String
  reason: String
  referrer_url: URI
  safe_harbor: String
  scope: String
  team_policy: String
  user_email: String
  user_first_name: String
  user_last_name: String
  user_password: String
  user_password_confirmation: String
  website: URI
}

# Autogenerated return type of PublishPolicy
type PublishPolicyPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  redirect_path: URI
  was_successful: Boolean!
}

# Root entity of the Hackerone Schema
type Query implements Node {
  bank_transfer_reference: BankTransferReference
  clusters(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    id: ID

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: ClusterOrder = {direction: ASC, field: BROWSING_FRIENDLY}
  ): ClusterConnection
  embedded_submission_form(uuid: String!): EmbeddedSubmissionForm
  external_program(handle: String!): ExternalProgram
  external_programs(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search_input: String
  ): ExternalProgramConnection
  id: ID!
  me: User

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  oauth_application(client_id: String!): OauthApplication
  query: Query!
  report(id: Int!): Report
  report_retest_user(activity_id: Int!): ReportRetestUser
  reports(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    database_id: Int = null
    filter: ReportFilterInput

    # Returns the first _n_ elements from the list.
    first: Int
    hackerone_hacker_submissions: Boolean = false
    handle: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    limit: Int = null
    order_by: ReportOrderInput = {direction: DESC, field: id}

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    page: Int = null
    pre_submission_review_states: [ReportPreSubmissionReviewStateEnum] = null
    state: ReportStateEnum
    substate: ReportStateEnum
    triage_dashboard: Boolean = false
    triage_dashboard_tab: String = null
    where: FiltersReportFilterRootInput
    without_scope: Boolean = null
  ): ReportConnection
  resource(url: URI): ResourceInterface
  session: Session
  severity_calculator: SeverityCalculator
  sla_statuses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: SlaStatusOrder = {field: TRIAGER_ROLE_AND_SLA_STATUS}
    team_states: [TeamState]
  ): SlaStatusConnection
  surveys(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    category: SurveyCategoryEnum

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SurveyConnectionType
  team(handle: String!): Team
  teams(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamOrderInput
    permissions: [PermissionEnum] = []
    search: String
    where: FiltersTeamFilterRootInput
  ): TeamConnection
  user(username: String!): User
  users(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
}

# Autogenerated input type of RejectInvitation
input RejectInvitationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
}

# Autogenerated return type of RejectInvitation
type RejectInvitationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  me: User
}

# Autogenerated input type of RemoveBountyTable
input RemoveBountyTableInput {
  bounty_table_id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveBountyTable
type RemoveBountyTablePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# A HackerOne report
type Report implements Node & ResourceInterface {
  _id: ID!
  activities(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    not_types: [ActivityTypes]
    order_by: ActivityOrderInput
    types: [ActivityTypes]

    # A timestamp encoded as a string that. When provided, only activities with a
    # updated_at greater than this value will be resolved. Example:
    # activities(updated_at_after: "2017-11-30 13:37:12 UTC")
    updated_at_after: String
  ): ActivityConnection
  allow_singular_disclosure_after: String
  allow_singular_disclosure_at: DateTime
  anc_reasons: [String]
  assignee: AssigneeUnion
  attachments: [Attachment]
  bounties: [Bounty]
  bounty_awarded_at: DateTime
  bug_reporter_agreed_on_going_public_at: DateTime
  cloned_from: Report
  closed_at: DateTime
  comments_closed: Boolean
  created_at: DateTime!
  cve_ids: [String]
  disclosed_at: DateTime
  first_program_activity_at: DateTime
  i_can_anc_review: Boolean
  id: ID!
  latest_activity_at: DateTime
  latest_public_activity_at: DateTime
  latest_public_activity_of_reporter_at: DateTime
  latest_public_activity_of_team_at: DateTime
  mediation_requested_at: DateTime
  original_report: Report

  # A post-submission trigger that notified the hacker after submission. This
  # field is only present for reports filed after February 14, 2016.
  post_submission_trigger_log_trigger: Trigger
  pre_submission_review_state: String
  previous_substate: String
  reference: ID
  reference_link: String
  reporter: User
  severity: Severity
  singular_disclosure_allowed: Boolean
  singular_disclosure_disabled: Boolean
  sla_fails_in_hours: Int
  stage: String
  state: String
  structured_scope: StructuredScope
  substate: String!
  suggested_bounty: String
  summaries: [Summary]
  swag: [Swag]
  swag_awarded_at: DateTime
  team: Team
  team_member_agreed_on_going_public_at: DateTime
  title: String
  triage_meta: TriageMeta
  triaged_at: DateTime
  url: URI!
  vulnerability_information: String
  vulnerability_information_html: String
  weakness: Weakness
}

# A interface for the common fields on an HackerOne Report Activity
interface ReportActivityInterface {
  attachments: [Attachment]
  automated_response: Boolean
  genius_execution_id: ID
  report: Report
}

# The connection type for Report.
type ReportConnection {
  # Groups and counts reports by the severity rating
  count_by_severity: [CountBySeverity]!

  # A list of edges.
  edges: [ReportEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ReportEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Report
}

# Filters which can be used to query reports
enum ReportFilterEnum {
  assigned
  assigned_to_me
  bounty_awarded
  going_public_team
  going_public_user
  hacker_requested_mediation
  ineligible_for_bounty
  needs_first_program_response
  no_bounty_awarded
  no_swag_awarded
  not_public
  public
  reporter_is_active
  sla_violation
  swag_awarded
  unassigned
}

input ReportFilterInput {
  assignee: [String]
  bounty_awarded_at__gt: DateTime
  bounty_awarded_at__lt: DateTime
  bounty_awarded_at__null: Boolean
  closed_at__gt: DateTime
  closed_at__lt: DateTime
  closed_at__null: Boolean
  created_at__gt: DateTime
  created_at__lt: DateTime
  disclosed_at__gt: DateTime
  disclosed_at__lt: DateTime
  disclosed_at__null: Boolean
  first_program_activity_at__gt: DateTime
  first_program_activity_at__lt: DateTime
  first_program_activity_at__null: Boolean
  id: [Int]
  last_activity_at__gt: DateTime
  last_activity_at__lt: DateTime
  last_program_activity_at__gt: DateTime
  last_program_activity_at__lt: DateTime
  last_public_activity_at__gt: DateTime
  last_public_activity_at__lt: DateTime
  last_reporter_activity_at__gt: DateTime
  last_reporter_activity_at__lt: DateTime
  program: [String]!
  reporter: [String]!
  state: [ReportStateEnum] = []
  swag_awarded_at__gt: DateTime
  swag_awarded_at__lt: DateTime
  swag_awarded_at__null: Boolean
  triaged_at__gt: DateTime
  triaged_at__lt: DateTime
  triaged_at__null: Boolean
}

# Fields on which a collection of reports can be ordered
enum ReportOrderField {
  bounty_awarded_at
  closed_at
  created_at
  disclosed_at
  first_program_activity_at
  id
  last_activity_at
  last_program_activity_at
  last_public_activity_at
  last_reporter_activity_at
  latest_activity_at
  sla_fails_at
  swag_awarded_at
  triaged_at
}

input ReportOrderInput {
  direction: OrderDirection!
  field: ReportOrderField!
}

# Pre submission review states a report can be in
enum ReportPreSubmissionReviewStateEnum {
  pre_submission_accepted
  pre_submission_needs_more_info
  pre_submission_pending
  pre_submission_rejected
}

# A report retest
type ReportRetest {
  _id: ID!
  created_at: DateTime
  created_by: User
  id: ID!
  report: Report
  report_retest_users(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ReportRetestUserConnection
}

# A report retest user
type ReportRetestUser {
  _id: ID!
  answered_can_be_reproduced: Boolean
  answered_fix_can_be_bypassed: Boolean
  bypass_report_id: Int
  completed_at: DateTime
  id: ID!
  report_retest: ReportRetest
  status: BountyStatusEnum!
  user: User
}

# The connection type for ReportRetestUser.
type ReportRetestUserConnection {
  completed_count: Int!

  # A list of edges.
  edges: [ReportRetestUserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type ReportRetestUserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ReportRetestUser
}

# States a report can be in
enum ReportStateEnum {
  closed
  duplicate
  informative
  needs_more_info
  new
  not_applicable
  open
  pre_submission
  resolved
  spam
  triaged
}

input ReportStateEnumPredicateInput {
  _eq: ReportStateEnum
  _gt: ReportStateEnum
  _gte: ReportStateEnum
  _in: [ReportStateEnum]
  _is_null: Boolean
  _lt: ReportStateEnum
  _lte: ReportStateEnum
  _neq: ReportStateEnum
  _nin: [ReportStateEnum]
}

# The connection type for User.
type ReporterConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# Represents a type that can be retrieved by a URL.
interface ResourceInterface {
  url: URI!
}

# Possible response efficiency indicators
enum ResponseEfficiencyIndicatorEnum {
  failed
  missed
  ok
}

# Autogenerated input type of RevokeCredential
input RevokeCredentialInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  credential_id: ID!
}

# Autogenerated return type of RevokeCredential
type RevokeCredentialPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  credential: Credential
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# A HackerOne session
type Session implements Node {
  csrf_token: String!
  id: ID!
}

# A HackerOne severity for a report
type Severity implements Node {
  _id: ID!
  attack_complexity: SeverityAttackComplexityEnum
  attack_vector: SeverityAttackVectorEnum
  author_type: SeverityAuthorEnum
  availability: SeverityAvailabilityEnum
  confidentiality: SeverityConfidentialityEnum
  created_at: DateTime
  id: ID!
  integrity: SeverityIntegrityEnum
  privileges_required: SeverityPrivilegesRequiredEnum
  rating: SeverityRatingEnum
  scope: SeverityScopeEnum
  score: Float
  user_id: Int
  user_interaction: SeverityUserInteractionEnum
}

# Severity attack complexity
enum SeverityAttackComplexityEnum {
  high
  low
}

# Severity attack vector
enum SeverityAttackVectorEnum {
  adjacent
  local
  network
  physical
}

# Severity author
enum SeverityAuthorEnum {
  Team
  User
}

# Severity availability
enum SeverityAvailabilityEnum {
  high
  low
  none
}

# Calculate CVSS Severity score and rating
type SeverityCalculator implements Node {
  calculated_max_severity(availability_requirement: SeveritySecurityRequirementEnum, confidentiality_requirement: SeveritySecurityRequirementEnum, integrity_requirement: SeveritySecurityRequirementEnum): SeverityRatingEnum
  id: ID!
}

# Severity confidentiality
enum SeverityConfidentialityEnum {
  high
  low
  none
}

# Severity integrity
enum SeverityIntegrityEnum {
  high
  low
  none
}

# Severity privileges required
enum SeverityPrivilegesRequiredEnum {
  high
  low
  none
}

# Severity rating
enum SeverityRatingEnum {
  critical
  high
  low
  medium
  none
}

# Severity scope
enum SeverityScopeEnum {
  changed
  unchanged
}

# Severity security requirement rating
enum SeveritySecurityRequirementEnum {
  high
  low
  medium
  none
}

# Severity user interaction
enum SeverityUserInteractionEnum {
  none
  required
}

# Resolution SLA settings for a HackerOne team
type SlaSetting {
  _id: ID!
  critical_severity_resolved_staleness_threshold: Int!
  high_severity_resolved_staleness_threshold: Int!
  id: ID!
  low_severity_resolved_staleness_threshold: Int!
  medium_severity_resolved_staleness_threshold: Int!
  none_severity_resolved_staleness_threshold: Int!
  use_advanced_settings: Boolean!
}

# SLA snapshot of a Team
type SlaSnapshot implements Node {
  average_time_to_bounty_awarded: Float
  average_time_to_first_program_response: Float
  average_time_to_report_resolved: Float
  average_time_to_report_triage: Float
  bounty_awarded_sla_misses_count: Int
  created_at: DateTime!
  first_program_response_sla_failures_count: Int
  first_program_response_sla_misses_count: Int
  id: ID!
  report_resolved_sla_misses_count: Int
  report_triage_sla_failures_count: Int
  report_triage_sla_misses_count: Int
  sla_failures_count: Int
  sla_misses_count: Int
  sla_on_target_count: Int
  team: Team!
}

# The connection type for SlaSnapshot.
type SlaSnapshotConnection {
  # A list of edges.
  edges: [SlaSnapshotEdge]
  group_by(period: SlaSnapshotIntervalEnum): [AggregatedSlaSnapshot]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SlaSnapshotEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: SlaSnapshot
}

# Fields on which a collection of SLA snapshots can be filtered
enum SlaSnapshotFilterField {
  PREVIOUS_WEEK
}

# Time intervals sla snapshots can be grouped by
enum SlaSnapshotIntervalEnum {
  day
  month
  week
}

# SLA Status of a Team
type SlaStatus implements Node {
  id: ID!
  team: Team!
  triage_sla_fail_in_hours: Int
  triage_sla_failures_count: Int
  triage_sla_misses_count: Int
  triage_sla_ok_count: Int
  user_id: Int
}

# The connection type for SlaStatus.
type SlaStatusConnection {
  # A list of edges.
  edges: [SlaStatusEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type SlaStatusEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: SlaStatus
}

input SlaStatusOrder {
  field: SlaStatusOrderField!
}

# Fields on which a collection of SLA statuses can be ordered
enum SlaStatusOrderField {
  TRIAGER_ROLE_AND_SLA_STATUS
}

# SLA types
enum SlaTypeEnum {
  first_program_response
  report_triage
}

# Slack channel
type SlackChannel implements Node {
  # ID of the object.
  id: ID!
  name: String!
}

# A Slack integration for a team
type SlackIntegration implements Node {
  channel: String
  channels: [SlackChannel]
  id: ID!
  should_fetch_slack_channels: Boolean!
  should_fetch_slack_users: Boolean!
  team: Team!
  team_url: String!
  users: [SlackUser]
}

# A Slack Pipeline Configuration for notifications
type SlackPipeline implements Node & ResourceInterface {
  # The primary key from the database
  _id: ID!
  channel: String!
  descriptive_label: String
  id: ID!
  notification_report_agreed_on_going_public: Boolean!
  notification_report_assignee_changed: Boolean!
  notification_report_became_public: Boolean!
  notification_report_bounty_paid: Boolean!
  notification_report_bounty_suggested: Boolean!
  notification_report_bug_closed_as_spam: Boolean!
  notification_report_bug_duplicate: Boolean!
  notification_report_bug_informative: Boolean!
  notification_report_bug_needs_more_info: Boolean!
  notification_report_bug_new: Boolean!
  notification_report_bug_not_applicable: Boolean!
  notification_report_closed_as_resolved: Boolean!
  notification_report_comments_closed: Boolean!
  notification_report_created: Boolean!
  notification_report_internal_comment_added: Boolean!
  notification_report_manually_disclosed: Boolean!
  notification_report_not_eligible_for_bounty: Boolean!
  notification_report_public_comment_added: Boolean!
  notification_report_reopened: Boolean!
  notification_report_swag_awarded: Boolean!
  notification_report_triaged: Boolean!
  team: Team!
  updated_at: DateTime!
  url: URI!
}

# The connection type for SlackPipeline.
type SlackPipelineConnection {
  # A list of edges.
  edges: [SlackPipelineEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type SlackPipelineEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: SlackPipeline
}

# Slack user
type SlackUser implements Node {
  # The id provided by Slack
  _id: String!
  avatar_small: String!
  deleted: Boolean!
  email: String!

  # ID of the object.
  id: ID!
  name: String!
  real_name: String
}

# The connection type for InvitationsSoftLaunch.
type SoftLaunchConnection {
  # A list of edges.
  edges: [InvitationsSoftLaunchEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# A static participant for a team
type StaticParticipant implements Node {
  _id: ID!
  avatar(size: ProfilePictureSizes!): String!
  bio: String
  external_url: String
  id: ID!
  name: String!
  year: String
}

# The connection type for StaticParticipant.
type StaticParticipantConnection {
  # A list of edges.
  edges: [StaticParticipantEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type StaticParticipantEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: StaticParticipant
}

input StringPredicateInput {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# A policy section of a HackerOne program
type StructuredPolicy implements Node & ResourceInterface {
  brand_promise: String
  id: ID!
  preferences: String
  process: String
  safe_harbor: String
  scope: String
  url: URI!
}

# A defined scope of a HackerOne program
type StructuredScope implements Node & ResourceInterface {
  _id: ID!
  archived_at: DateTime
  asset_identifier: String!
  asset_type: StructuredScopedAssetTypeEnum
  availability_requirement: SeveritySecurityRequirementEnum
  confidentiality_requirement: SeveritySecurityRequirementEnum
  created_at: DateTime!
  critical_severity_resolved_reports_count: Int
  eligible_for_bounty: Boolean
  eligible_for_submission: Boolean
  high_severity_resolved_reports_count: Int
  id: ID!
  instruction: String
  integrity_requirement: SeveritySecurityRequirementEnum
  low_severity_resolved_reports_count: Int
  max_severity: SeverityRatingEnum
  medium_severity_resolved_reports_count: Int
  reference: String
  rendered_instruction: String
  reports(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    database_id: Int = null
    filter: ReportFilterInput

    # Returns the first _n_ elements from the list.
    first: Int
    hackerone_hacker_submissions: Boolean = false
    handle: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    limit: Int = null
    order_by: ReportOrderInput = {direction: DESC, field: id}

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    page: Int = null
    pre_submission_review_states: [ReportPreSubmissionReviewStateEnum] = null
    state: ReportStateEnum
    substate: ReportStateEnum
    triage_dashboard: Boolean = false
    triage_dashboard_tab: String = null
    where: FiltersReportFilterRootInput
    without_scope: Boolean = null
  ): ReportConnection
  structured_scope_versions(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): StructuredScopeVersionConnection
  team: Team
  updated_at: DateTime
  url: URI!
}

# An edge in a connection.
type StructuredScopeEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: StructuredScope
}

# A versioned log of a scope of a HackerOne program
type StructuredScopeVersion implements Node & ResourceInterface {
  _id: ID!
  archived_at: DateTime
  created_at: DateTime!
  id: ID!
  instruction: String
  max_severity: String
  team: Team
  url: URI!
}

# The connection type for StructuredScopeVersion.
type StructuredScopeVersionConnection {
  # A list of edges.
  edges: [StructuredScopeVersionEdge]
  max_updated_at: DateTime

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type StructuredScopeVersionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: StructuredScopeVersion
}

# Structured Scope asset type enum
enum StructuredScopedAssetTypeEnum {
  APPLE_STORE_APP_ID
  CIDR
  DOWNLOADABLE_EXECUTABLES
  GOOGLE_PLAY_APP_ID
  HARDWARE
  OTHER
  OTHER_APK
  OTHER_IPA
  SOURCE_CODE
  TESTFLIGHT
  URL
  WINDOWS_APP_STORE_APP_ID
}

input StructuredScopedAssetTypeEnumPredicateInput {
  _eq: StructuredScopedAssetTypeEnum
  _gt: StructuredScopedAssetTypeEnum
  _gte: StructuredScopedAssetTypeEnum
  _in: [StructuredScopedAssetTypeEnum]
  _is_null: Boolean
  _lt: StructuredScopedAssetTypeEnum
  _lte: StructuredScopedAssetTypeEnum
  _neq: StructuredScopedAssetTypeEnum
  _nin: [StructuredScopedAssetTypeEnum]
}

# The connection type for StructuredScope.
type StructuredScopesConnection {
  # A list of edges.
  edges: [StructuredScopeEdge]
  max_updated_at: DateTime

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# A HackerOne programs's submission requirements
type SubmissionRequirements implements Node {
  id: ID!
  mfa_required_at: String
  terms_required_at: String
}

# Submission states
enum SubmissionStateEnum {
  disabled
  open
  paused
}

input SubmissionStateEnumPredicateInput {
  _eq: SubmissionStateEnum
  _gt: SubmissionStateEnum
  _gte: SubmissionStateEnum
  _in: [SubmissionStateEnum]
  _is_null: Boolean
  _lt: SubmissionStateEnum
  _lte: SubmissionStateEnum
  _neq: SubmissionStateEnum
  _nin: [SubmissionStateEnum]
}

# Team subscription action enum
enum SubscriptionActionEnum {
  subscribe_to_all
  unsubscribe_from_all
}

# A HackerOne summary for a report
type Summary implements Node {
  _id: ID!
  category: String!
  content: String!
  created_at: DateTime!
  id: ID!
  updated_at: DateTime!
  user: User!
}

# A HackerOne survey
type Survey implements Node & ResourceInterface {
  category: String!
  id: ID!
  question: String!
  structured_responses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SurveyStructuredResponseConnectionType
  url: URI!
}

# A survey filled out by a hacker
type SurveyAnswer implements Node {
  _id: ID!
  created_at: DateTime!
  feedback: String
  id: ID!
  source_type: String
  survey_structured_responses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SurveyStructuredResponseConnectionType
  team: Team
  updated_at: DateTime
  user: User
}

# The connection type for SurveyAnswer.
type SurveyAnswerConnection {
  # A list of edges.
  edges: [SurveyAnswerEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  statistics(response_type: SurveyStructuredResponseTypeEnum): SurveyAnswerStatistics
  total_count: Int!
}

# An edge in a connection.
type SurveyAnswerEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: SurveyAnswer
}

# Fields on which a collection of survey answers can be ordered
enum SurveyAnswerOrderField {
  id
}

input SurveyAnswerOrderInput {
  direction: OrderDirection!
  field: SurveyAnswerOrderField!
}

# Statistics for a reason hackers have selected in a survey
type SurveyAnswerStatistics {
  survey_structured_response: SurveyStructuredResponse
  total_count: Int
}

# Survey categories
enum SurveyCategoryEnum {
  invitation_rejection
  program_leave
}

# The connection type for Survey.
type SurveyConnectionType {
  # A list of edges.
  edges: [SurveyEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type SurveyEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Survey
}

# Prepared survey response reasons
type SurveyStructuredResponse implements Node {
  _id: ID!
  enabled: Boolean!
  helper_text: String
  id: ID!
  reason: String!
  survey: Survey
}

# The connection type for SurveyStructuredResponse.
type SurveyStructuredResponseConnectionType {
  # A list of edges.
  edges: [SurveyStructuredResponseEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type SurveyStructuredResponseEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: SurveyStructuredResponse
}

# Survey Structured Response types
enum SurveyStructuredResponseTypeEnum {
  aggressive_policy
  backlog
  busy
  clarity
  competitiveness
  hardened
  objection
  onerous_setup
  small_scope
  specialization
  uninteresting
  unresponsive
}

# A HackerOne swag awarded for a report
type Swag implements Node {
  _id: ID!
  address: Address
  created_at: DateTime
  id: ID!
  report: Report
  sent: Boolean!
  team: Team
  user: User
}

# The connection type for Swag.
type SwagConnection {
  any: Boolean!

  # A list of edges.
  edges: [SwagEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type SwagEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Swag
}

# A tax form for a user
type TaxForm implements Node {
  created_at: DateTime!
  hello_sign_client_id: String
  id: ID!
  signed_at: DateTime
  status: TaxFormStateEnum!
  type: TaxFormTypeEnum!
  url: String
}

# Status of a tax form
enum TaxFormStateEnum {
  expired
  needs_review
  rejected
  requested
  unavailable
  valid
}

# Type of a tax form
enum TaxFormTypeEnum {
  W8BEN
  W8BENE
  W9
  W9Corporate
}

# A HackerOne team
type Team implements Node & ResourceInterface {
  # The primary key from the database
  _id: ID!
  about: String
  abuse: Boolean
  activities(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    not_types: [ActivityTypes]
    order_by: ActivityOrderInput
    types: [ActivityTypes]

    # A timestamp encoded as a string that. When provided, only activities with a
    # updated_at greater than this value will be resolved. Example:
    # activities(updated_at_after: "2017-11-30 13:37:12 UTC")
    updated_at_after: String
  ): ActivityConnection
  allow_all_hacker_invitations: Boolean
  allow_email_and_automatic_invitations: Boolean
  allows_private_disclosure: Boolean
  automatic_invites: Boolean
  average_bounty_lower_amount: Int
  average_bounty_upper_amount: Int
  awards_miles: Boolean
  base_bounty: Int
  bookmarked: Boolean
  bookmarked_team_users(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  bounty_awarded_staleness_threshold: Int
  bounty_table: BountyTable
  bounty_time: Float
  bug_count: Int
  challenge_setting: ChallengeSetting
  child_teams(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): TeamConnection
  claimed_credential: Credential
  common_responses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: CommonResponseOrder = {direction: ASC, field: title}
  ): CommonResponseConnection
  created_at: DateTime
  credential_instruction: String
  credential_instruction_html: String
  credentials(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CredentialConnection
  credentials_available_count: Int
  credentials_set_up: Boolean
  critical_submissions_enabled: Boolean
  currency: String
  cve_requests(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    database_id: Int = null

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CveRequestsConnection
  embedded_submission_domains(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EmbeddedSubmissionDomainConnectionType
  embedded_submission_form_enabled: Boolean!
  embedded_submission_forms(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EmbeddedSubmissionFormConnectionType
  external_program: ExternalProgram
  external_url: String
  fancy_slack_integration: Boolean
  fancy_slack_integration_enabled: Boolean!
  first_response_time: Float
  goal_valid_reports: Int
  grace_period_remaining_in_days: Int
  hackerone_to_jira_events_configuration: HackeroneToJiraEventsConfiguration
  hackers_also_viewed(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamOrderInput
    permissions: [PermissionEnum] = []
    search: String
    where: FiltersTeamFilterRootInput
  ): TeamConnection
  handle: String!
  has_avatar: Boolean
  has_policy: Boolean
  has_structured_policy: Boolean
  hide_bounty_amounts: Boolean
  i_can_create_jira_webhook: Boolean
  i_can_destroy_jira_webhook: Boolean!
  i_can_manage_program: Boolean!
  i_can_view_base_bounty: Boolean
  i_can_view_bounty_table: Boolean
  i_can_view_critical_submissions_enabled: Boolean
  i_can_view_invite_hackers: Boolean!
  i_can_view_jira_integration: Boolean
  i_can_view_jira_webhook: Boolean
  i_can_view_phabricator_integration: Boolean
  i_can_view_reports_resolved: Boolean
  i_can_view_weaknesses: Boolean
  id: ID!
  inbox_views(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamInboxViewOrder = {direction: ASC, field: position}
    visible: Boolean
  ): TeamInboxViewConnection
  internet_bug_bounty: Boolean
  invitation_rejection_survey_answers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # A date string that, when provided, only survey answers with a created_at
    # less than the end of the day will be resolved. Example:
    # survey_answers(end_date: "2017-11-30")
    end_date: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: SurveyAnswerOrderInput = {direction: DESC, field: id}

    # A date string that, when provided, only survey answers with a created_at
    # greater than the beginning of the day will be resolved. Example:
    # survey_answers(start_date: "2017-11-30")
    start_date: String
  ): SurveyAnswerConnection
  is_ready_for_public_launch: Boolean
  jira_integration: JiraIntegration
  jira_oauth: JiraOauth
  jira_webhook: JiraWebhook
  launch_link: String
  maximum_number_of_team_mediation_requests: Float
  minimum_bounty: Int
  name: String!
  new_staleness_threshold: Int
  new_staleness_threshold_limit: Int
  offers_bounties: Boolean
  offers_swag: Boolean
  only_cleared_hackers: Boolean
  participants(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    limit: Int = null
    order_by: UserOrderInput = {direction: DESC, field: reputation}
    year: Int = null
  ): ParticipantConnection
  phabricator_integration: PhabricatorIntegration
  policy: String
  policy_html: String
  posts(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamPostOrderInput = {direction: DESC, field: created_at}
  ): TeamPostConnection
  product_edition: ProductEdition
  profile_metrics_snapshots(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProfileMetricsSnapshotConnection
  profile_picture(size: ProfilePictureSizes!): String!
  program_leave_survey_answers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # A date string that, when provided, only survey answers with a created_at
    # less than the end of the day will be resolved. Example:
    # survey_answers(end_date: "2017-11-30")
    end_date: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: SurveyAnswerOrderInput = {direction: DESC, field: id}

    # A date string that, when provided, only survey answers with a created_at
    # greater than the beginning of the day will be resolved. Example:
    # survey_answers(start_date: "2017-11-30")
    start_date: String
  ): SurveyAnswerConnection
  report_submission_form_intro: String
  report_submission_form_intro_html: String
  report_template: String
  reporters(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ReporterConnection
  reports(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    database_id: Int = null
    filter: ReportFilterInput

    # Returns the first _n_ elements from the list.
    first: Int
    hackerone_hacker_submissions: Boolean = false
    handle: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    limit: Int = null
    order_by: ReportOrderInput = {direction: DESC, field: id}

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    page: Int = null
    pre_submission_review_states: [ReportPreSubmissionReviewStateEnum] = null
    state: ReportStateEnum
    substate: ReportStateEnum
    triage_dashboard: Boolean = false
    triage_dashboard_tab: String = null
    violates_minimum_sla: SlaTypeEnum
    where: FiltersReportFilterRootInput
    without_scope: Boolean = null
  ): ReportConnection
  resolution_time: Float
  resolved_report_count: Int
  resolved_staleness_threshold: Int
  response_efficiency_indicator: ResponseEfficiencyIndicatorEnum
  response_efficiency_percentage: Int
  review_rejected_at: DateTime
  review_requested_at: DateTime
  settings_disabled: Boolean
  settings_link: String
  setup_guide_completed: Boolean
  sla_failed_count: Int
  sla_setting: SlaSetting
  sla_snapshots(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    end_date: DateTime

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    of: SlaSnapshotFilterField
    start_date: DateTime
  ): SlaSnapshotConnection
  sla_status: SlaStatus
  slack_integration: SlackIntegration
  slack_pipelines(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SlackPipelineConnection
  soft_launch_invitations(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): InvitationUnionConnection
  started_accepting_at: DateTime
  state: TeamState
  static_participants(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): StaticParticipantConnection
  structured_policy: StructuredPolicy
  structured_scope_versions(
    # Returns the elements in the list that come after the specified global ID.
    after: String
    archived: Boolean

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): StructuredScopeVersionConnection
  structured_scopes(
    # Returns the elements in the list that come after the specified global ID.
    after: String
    archived: Boolean = null
    asset_type: String = null

    # Returns the elements in the list that come before the specified global ID.
    before: String
    eligible_for_submission: Boolean = null

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String = null
  ): StructuredScopesConnection
  submission_requirements: SubmissionRequirements
  submission_state: SubmissionStateEnum
  survey_answers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # A date string that, when provided, only survey answers with a created_at
    # less than the end of the day will be resolved. Example:
    # survey_answers(end_date: "2017-11-30")
    end_date: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: SurveyAnswerOrderInput = {direction: DESC, field: id}

    # A date string that, when provided, only survey answers with a created_at
    # greater than the beginning of the day will be resolved. Example:
    # survey_answers(start_date: "2017-11-30")
    start_date: String
  ): SurveyAnswerConnection
  swag(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SwagConnection
  target_signal: Float
  team_display_options: TeamDisplayOptions
  team_member_groups: [TeamMemberGroup]
  team_members(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamMemberOrder = {direction: ASC, field: username}
  ): TeamMemberConnection
  team_profile: TeamCachedProfile
  team_weaknesses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamWeaknessesOrder = {field: id, direction: DESC}
    state: TeamWeaknessStates
    with_reports: Boolean
  ): TeamWeaknessConnection
  triage_active: Boolean
  triage_bounty_management: String
  triage_enabled: Boolean
  triage_note: String
  triage_note_html: String
  triage_time: Float
  triaged_staleness_threshold: Int
  triaged_staleness_threshold_limit: Int
  triggers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TriggersOrder = {direction: DESC, field: created_at}
    search: String = null
  ): TriggerConnection
  twitter_handle: String
  updated_at: DateTime
  url: URI!
  vpn_enabled: Boolean
  weaknesses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    cluster_id: ID = null

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: WeaknessOrder = {direction: ASC, field: name}
    search: String = null
  ): DeprecatedTeamWeaknessConnection
  website: String
  whitelisted_hackers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): WhitelistedHackerConnection
}

# Cached metrics of a Team
type TeamCachedProfile {
  _id: ID!
  disclosed_reports_in_last_year_count: Int
  hackers_accepted_all_time_count: Int
  hackers_invited_all_time_count: Int
  id: ID!
  latest_report_created_at: DateTime
  latest_serious_report_triaged_at: DateTime
  recently_participating_hackers_count: Int
  reports_received_in_three_months_count: Int
}

# The connection type for Team.
type TeamConnection {
  # A list of edges.
  edges: [TeamEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# Display options for a HackerOne team
type TeamDisplayOptions {
  _id: ID!
  id: ID!
  show_average_bounty: Boolean!
  show_mean_bounty_time: Boolean!
  show_mean_first_response_time: Boolean!
  show_mean_report_triage_time: Boolean!
  show_mean_resolution_time: Boolean!
  show_minimum_bounty: Boolean!
  show_reports_resolved: Boolean!
  show_response_efficiency_indicator: Boolean!
  show_top_bounties: Boolean!
  show_total_bounties_paid: Boolean!
  team: Team!
}

# An edge in a connection.
type TeamEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Team
}

# A team report filter preset
type TeamInboxView implements Node {
  _id: ID!
  assigned_to_group_ids: [Int!]!
  assigned_to_user_ids: [Int!]!
  built_in: Boolean!
  created_at: DateTime!
  filters: [ReportFilterEnum!]!
  hackathons: [Int!]!
  id: ID!
  key: String!
  name: String!
  position: Int!
  reporter_ids: [Int!]!
  severities: [String!]!
  substates: [ReportStateEnum!]!
  team: Team!
  text_query: String!
  updated_at: DateTime!
  visible: Boolean!
}

# The connection type for TeamInboxView.
type TeamInboxViewConnection {
  # A list of edges.
  edges: [TeamInboxViewEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type TeamInboxViewEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TeamInboxView
}

input TeamInboxViewOrder {
  direction: OrderDirection!
  field: TeamInboxViewOrderField!
}

# Fields on which a collection of team inbox views can be ordered
enum TeamInboxViewOrderField {
  position
}

# A HackerOne team member
type TeamMember implements Node {
  # The primary key from the database
  _id: ID!
  auto_subscribe: Boolean
  concealed: Boolean
  created_at: DateTime!
  i_can_leave_team: Boolean!
  id: ID!
  permissions: [String]!
  slack_user_id: String
  team: Team!
  user: User!
}

# The connection type for TeamMember.
type TeamMemberConnection {
  # A list of edges.
  edges: [TeamMemberEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type TeamMemberEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TeamMember
}

# A HackerOne team member group
type TeamMemberGroup implements Node {
  _id: ID!
  created_at: DateTime

  # ID of the object.
  id: ID!
  immutable: Boolean!
  key: String
  name: String!
  permissions: [String]!
  team_members: [TeamMember]
}

input TeamMemberOrder {
  direction: OrderDirection!
  field: TeamMemberOrderField!
}

# Fields on which a collection of team members can be ordered
enum TeamMemberOrderField {
  username
}

# Fields on which a collection of Teams can be ordered
enum TeamOrderField {
  average_bounty_amount
  last_invitation_accepted_at
  minimum_bounty
  name
  reports_resolved
  response_efficiency
  started_accepting_at
}

input TeamOrderInput {
  direction: OrderDirection!
  field: TeamOrderField!
}

# The connection type for Post.
type TeamPostConnection {
  # A list of edges.
  edges: [PostEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# Fields on which a collection of team posts can be ordered
enum TeamPostOrderField {
  created_at
}

input TeamPostOrderInput {
  direction: OrderDirection!
  field: TeamPostOrderField!
}

# Different possible team states
enum TeamState {
  da_mode
  inactive
  public_mode
  sandboxed
  soft_launched
}

input TeamStatePredicateInput {
  _eq: TeamState
  _gt: TeamState
  _gte: TeamState
  _in: [TeamState]
  _is_null: Boolean
  _lt: TeamState
  _lte: TeamState
  _neq: TeamState
  _nin: [TeamState]
}

# Team configuration of a weakness
type TeamWeakness implements Node {
  id: ID!
  instruction: String
  report_count: Int
  state: TeamWeaknessStates
  team: Team!
  weakness: Weakness!
}

# The connection type for TeamWeakness.
type TeamWeaknessConnection {
  # A list of edges.
  edges: [TeamWeaknessEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type TeamWeaknessEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TeamWeakness
}

# Fields on which a collection of reports can be ordered
enum TeamWeaknessOrderField {
  id
  report_count
}

# Possible states of how a weakness can be configured for a team
enum TeamWeaknessStates {
  disabled
  enabled
  hidden
}

input TeamWeaknessesOrder {
  direction: OrderDirection!
  field: TeamWeaknessOrderField!
}

# Triage meta
type TriageMeta implements Node & ResourceInterface {
  assigned_triager: User
  id: ID!
  url: URI!
}

# Trigger
type Trigger implements Node & ResourceInterface {
  _id: ID!
  action_message: String!
  action_type: String!
  created_at: DateTime!
  expression_operator: String!
  expressions(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ExpressionConnection!
  id: ID!
  seeded: Boolean!
  team: Team!
  title: String
  trigger_action_logs(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): TriggerActionLogConnection
  url: URI!
}

# TriggerActionLog
type TriggerActionLog implements Node {
  _id: ID!
  id: ID!
}

# The connection type for TriggerActionLog.
type TriggerActionLogConnection {
  # A list of edges.
  edges: [TriggerActionLogEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type TriggerActionLogEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TriggerActionLog
}

# The connection type for Trigger.
type TriggerConnection {
  # A list of edges.
  edges: [TriggerEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type TriggerEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Trigger
}

# Fields on which a collection of triggers can be ordered
enum TriggerOrderField {
  created_at
}

input TriggersOrder {
  direction: OrderDirection!
  field: TriggerOrderField!
}

# Tshirt size
enum TshirtSizeEnum {
  M_Large
  M_Medium
  M_Small
  M_XLarge
  M_XXLarge
  W_Large
  W_Medium
  W_Small
  W_XLarge
  W_XXLarge
}

# An object that holds backup codes, a TOTP secret, signature, and QR code
type TwoFactorAuthenticationCredentials implements Node {
  backup_codes: [String!]!
  id: ID!
  qr_code: [[Boolean!]!]!
  signature: String!
  totp_secret: String!
}

# Represents a RFC compliant URI string. It is often used to fetch an object.
scalar URI

# Autogenerated input type of UnclaimReport
input UnclaimReportInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
}

# Autogenerated return type of UnclaimReport
type UnclaimReportPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  report: Report
  was_successful: Boolean!
}

# Autogenerated input type of UpdateAccountRecoveryPhoneNumber
input UpdateAccountRecoveryPhoneNumberInput {
  account_recovery_unverified_phone_number: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateAccountRecoveryPhoneNumber
type UpdateAccountRecoveryPhoneNumberPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateAssigneeToGroup
input UpdateAssigneeToGroupInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  group_id: ID!
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateAssigneeToGroup
type UpdateAssigneeToGroupPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateAssigneeToNobody
input UpdateAssigneeToNobodyInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateAssigneeToNobody
type UpdateAssigneeToNobodyPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateAssigneeToUser
input UpdateAssigneeToUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
  user_id: ID!
}

# Autogenerated return type of UpdateAssigneeToUser
type UpdateAssigneeToUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateAutomaticInvites
input UpdateAutomaticInvitesInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  enabled: Boolean!
  handle: String!
}

# Autogenerated return type of UpdateAutomaticInvites
type UpdateAutomaticInvitesPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team: Team
}

# Autogenerated input type of UpdateBookmarkedTeam
input UpdateBookmarkedTeamInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of UpdateBookmarkedTeam
type UpdateBookmarkedTeamPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  query: Query
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateBountyTable
input UpdateBountyTableInput {
  bounty_table_rows: [BountyTableRowInput!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  critical_label: String!
  description: String
  high_label: String!
  low_label: String!
  medium_label: String!
  team_id: ID!
}

# Autogenerated return type of UpdateBountyTable
type UpdateBountyTablePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateChallengeSetting
input UpdateChallengeSettingInput {
  challenge_setting_id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  policy: String!
}

# Autogenerated return type of UpdateChallengeSetting
type UpdateChallengeSettingPayload implements MutationResult {
  challenge_setting: ChallengeSetting

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# Autogenerated input type of UpdateCredentialAccountDetail
input UpdateCredentialAccountDetailInput {
  account_details: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  credential_id: ID!
}

# Autogenerated return type of UpdateCredentialAccountDetail
type UpdateCredentialAccountDetailPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  credential: Credential
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# Autogenerated input type of UpdateCredentialInstruction
input UpdateCredentialInstructionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  credential_instruction: String!
  team_id: String!
}

# Autogenerated return type of UpdateCredentialInstruction
type UpdateCredentialInstructionPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateCveRequest
input UpdateCveRequestInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  cve_request_id: ID!
  description: String
  event: String
  event_reason: String
  product: String
  product_version: String
  references: [String]
  report_id: Int
  vulnerability_discovered_at: String
  weakness_name: String
}

# Autogenerated return type of UpdateCveRequest
type UpdateCveRequestPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  cve_request: CveRequest
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  was_successful: Boolean!
}

# Autogenerated input type of UpdateEmbeddedSubmissionDomain
input UpdateEmbeddedSubmissionDomainInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  embedded_submission_domains: [String]!
  team_id: ID!
}

# Autogenerated return type of UpdateEmbeddedSubmissionDomain
type UpdateEmbeddedSubmissionDomainPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateFacebookUserId
input UpdateFacebookUserIdInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  facebook_user_id: String
}

# Autogenerated return type of UpdateFacebookUserId
type UpdateFacebookUserIdPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateInvitationPreferences
input UpdateInvitationPreferencesInput {
  bounty_programs_only: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  invitation_preference: InvitationPreferenceTypeEnum
  managed_programs_only: Boolean
  min_bounty: Float
  receive_invites: Boolean
}

# Autogenerated return type of UpdateInvitationPreferences
type UpdateInvitationPreferencesPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateJiraWebhook
input UpdateJiraWebhookInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  jira_webhook_id: ID!
  process_assignee_change: Boolean
  process_comment_add: Boolean
  process_priority_change: Boolean
  process_resolution_change: Boolean
  process_status_change: Boolean
}

# Autogenerated return type of UpdateJiraWebhook
type UpdateJiraWebhookPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  jira_webhook: JiraWebhook!
}

# Autogenerated input type of UpdateLastViewedNewFeaturesAt
input UpdateLastViewedNewFeaturesAtInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateLastViewedNewFeaturesAt
type UpdateLastViewedNewFeaturesAtPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateMe
input UpdateMeInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tshirt_size: String
}

# Autogenerated return type of UpdateMe
type UpdateMePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdatePhabricatorIntegration
input UpdatePhabricatorIntegrationInput {
  api_token: String
  base_url: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  description: String
  process_h1_comment_added: Boolean
  process_h1_status_change: Boolean
  process_phabricator_comment_added: Boolean
  process_phabricator_status_change: Boolean
  team_id: ID!
  title: String
}

# Autogenerated return type of UpdatePhabricatorIntegration
type UpdatePhabricatorIntegrationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team: Team
}

# Autogenerated input type of UpdateReportCloseComments
input UpdateReportCloseCommentsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportCloseComments
type UpdateReportCloseCommentsPayload {
  activity: ActivitiesCommentsClosed

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of UpdateReportStateToDuplicate
input UpdateReportStateToDuplicateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String!
  original_report_id: Int
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToDuplicate
type UpdateReportStateToDuplicatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToInformative
input UpdateReportStateToInformativeInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String!
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToInformative
type UpdateReportStateToInformativePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToNeedsMoreInfo
input UpdateReportStateToNeedsMoreInfoInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String!
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToNeedsMoreInfo
type UpdateReportStateToNeedsMoreInfoPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToNew
input UpdateReportStateToNewInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToNew
type UpdateReportStateToNewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToNotApplicable
input UpdateReportStateToNotApplicableInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToNotApplicable
type UpdateReportStateToNotApplicablePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToResolved
input UpdateReportStateToResolvedInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToResolved
type UpdateReportStateToResolvedPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToSpam
input UpdateReportStateToSpamInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToSpam
type UpdateReportStateToSpamPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStateToTriaged
input UpdateReportStateToTriagedInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  report_id: ID!
}

# Autogenerated return type of UpdateReportStateToTriaged
type UpdateReportStateToTriagedPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportStructuredScope
input UpdateReportStructuredScopeInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
  structured_scope_id: ID
}

# Autogenerated return type of UpdateReportStructuredScope
type UpdateReportStructuredScopePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateReportTitle
input UpdateReportTitleInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report_id: ID!
  title: String!
}

# Autogenerated return type of UpdateReportTitle
type UpdateReportTitlePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  report: Report
}

# Autogenerated input type of UpdateSingleBookmarkedTeam
input UpdateSingleBookmarkedTeamInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
}

# Autogenerated return type of UpdateSingleBookmarkedTeam
type UpdateSingleBookmarkedTeamPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateSlackPipeline
input UpdateSlackPipelineInput {
  channel: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  descriptive_label: String
  notification_report_agreed_on_going_public: Boolean!
  notification_report_assignee_changed: Boolean!
  notification_report_became_public: Boolean!
  notification_report_bounty_paid: Boolean!
  notification_report_bounty_suggested: Boolean!
  notification_report_bug_closed_as_spam: Boolean!
  notification_report_bug_duplicate: Boolean!
  notification_report_bug_informative: Boolean!
  notification_report_bug_needs_more_info: Boolean!
  notification_report_bug_new: Boolean!
  notification_report_bug_not_applicable: Boolean!
  notification_report_closed_as_resolved: Boolean!
  notification_report_comments_closed: Boolean!
  notification_report_created: Boolean!
  notification_report_internal_comment_added: Boolean!
  notification_report_manually_disclosed: Boolean!
  notification_report_not_eligible_for_bounty: Boolean!
  notification_report_public_comment_added: Boolean!
  notification_report_reopened: Boolean!
  notification_report_swag_awarded: Boolean!
  notification_report_triaged: Boolean!
  slack_pipeline_id: ID!
}

# Autogenerated return type of UpdateSlackPipeline
type UpdateSlackPipelinePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  slack_pipeline: SlackPipeline!
}

# Autogenerated input type of UpdateSlackUser
input UpdateSlackUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  slack_user_id: String!
  team_member_id: ID!
}

# Autogenerated return type of UpdateSlackUser
type UpdateSlackUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_member: TeamMember!
}

# Autogenerated input type of UpdateStructuredPolicy
input UpdateStructuredPolicyInput {
  brand_promise: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  preferences: String
  process: String
  safe_harbor: String
  scope: String
  team_handle: String!
}

# Autogenerated return type of UpdateStructuredPolicy
type UpdateStructuredPolicyPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateStructuredScope
input UpdateStructuredScopeInput {
  asset_identifier: String
  availability_requirement: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  confidentiality_requirement: String
  eligible_for_bounty: Boolean
  eligible_for_submission: Boolean
  instruction: String
  integrity_requirement: String
  reference: String
  structured_scope_id: ID!
}

# Autogenerated return type of UpdateStructuredScope
type UpdateStructuredScopePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  query: Query
  structured_scope: StructuredScope
}

# Autogenerated input type of UpdateSubmissionRequirement
input UpdateSubmissionRequirementInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  mfa_required_at: String
  team_id: ID!
}

# Autogenerated return type of UpdateSubmissionRequirement
type UpdateSubmissionRequirementPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamAllowsPrivateDisclosure
input UpdateTeamAllowsPrivateDisclosureInput {
  allows_private_disclosure: Boolean!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
}

# Autogenerated return type of UpdateTeamAllowsPrivateDisclosure
type UpdateTeamAllowsPrivateDisclosurePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamCriticalSubmissionState
input UpdateTeamCriticalSubmissionStateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  critical_submissions_enabled: Boolean!
  handle: String!
}

# Autogenerated return type of UpdateTeamCriticalSubmissionState
type UpdateTeamCriticalSubmissionStatePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamFancySlackIntegration
input UpdateTeamFancySlackIntegrationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fancy_slack_integration: Boolean!
  team_id: ID!
}

# Autogenerated return type of UpdateTeamFancySlackIntegration
type UpdateTeamFancySlackIntegrationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team: Team
}

# Autogenerated input type of UpdateTeamMemberVisibility
input UpdateTeamMemberVisibilityInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  concealed: Boolean!
  team_member_id: ID!
}

# Autogenerated return type of UpdateTeamMemberVisibility
type UpdateTeamMemberVisibilityPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team_member: TeamMember
}

# Autogenerated input type of UpdateTeamResponseSla
input UpdateTeamResponseSlaInput {
  bounty_awarded_staleness_threshold: Int

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  critical_severity_resolved_staleness_threshold: Int
  high_severity_resolved_staleness_threshold: Int
  low_severity_resolved_staleness_threshold: Int
  medium_severity_resolved_staleness_threshold: Int
  new_staleness_threshold: Int
  none_severity_resolved_staleness_threshold: Int
  resolved_staleness_threshold: Int
  team_handle: String!
  triaged_staleness_threshold: Int
  use_advanced_settings: Boolean
}

# Autogenerated return type of UpdateTeamResponseSla
type UpdateTeamResponseSlaPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamSubmissionState
input UpdateTeamSubmissionStateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  handle: String!
  submission_state: SubmissionStateEnum!
}

# Autogenerated return type of UpdateTeamSubmissionState
type UpdateTeamSubmissionStatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team: Team
}

# Autogenerated input type of UpdateTeamSubscription
input UpdateTeamSubscriptionInput {
  action: SubscriptionActionEnum
  auto_subscribe: Boolean!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_member_id: ID!
}

# Autogenerated return type of UpdateTeamSubscription
type UpdateTeamSubscriptionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  team_member: TeamMember
}

# Autogenerated input type of UpdateTeamSuccessGoals
input UpdateTeamSuccessGoalsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  goal_valid_reports: Int!
  team_id: ID!
}

# Autogenerated return type of UpdateTeamSuccessGoals
type UpdateTeamSuccessGoalsPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamTriageNote
input UpdateTeamTriageNoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  team_id: ID!
  triage_note: String!
}

# Autogenerated return type of UpdateTeamTriageNote
type UpdateTeamTriageNotePayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  team: Team
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTeamWeakness
input UpdateTeamWeaknessInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  instruction: String
  state: TeamWeaknessStates!
  team_weakness_id: ID!
}

# Autogenerated return type of UpdateTeamWeakness
type UpdateTeamWeaknessPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  query: Query
  team_weakness: TeamWeakness
}

# Autogenerated input type of UpdateTrigger
input UpdateTriggerInput {
  action_message: String!
  action_type: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  expression_operator: String!
  expressions: [ExpressionInput]!
  trigger_id: ID!
}

# Autogenerated return type of UpdateTrigger
type UpdateTriggerPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  trigger: Trigger
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTwoFactorAuthenticationBackupCodes
input UpdateTwoFactorAuthenticationBackupCodesInput {
  backup_code: String!
  backup_codes: [String]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  otp_code: String!
  password: String!
  signature: String!
  totp_secret: String!
}

# Autogenerated return type of UpdateTwoFactorAuthenticationBackupCodes
type UpdateTwoFactorAuthenticationBackupCodesPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateTwoFactorAuthenticationCredentials
input UpdateTwoFactorAuthenticationCredentialsInput {
  backup_code: String!
  backup_codes: [String]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  otp_code: String!
  password: String!
  signature: String!
  totp_secret: String!
}

# Autogenerated return type of UpdateTwoFactorAuthenticationCredentials
type UpdateTwoFactorAuthenticationCredentialsPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateUserEmail
input UpdateUserEmailInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
}

# Autogenerated return type of UpdateUserEmail
type UpdateUserEmailPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# Autogenerated input type of UpdateUserLufthansaAccount
input UpdateUserLufthansaAccountInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  first_name: String!
  last_name: String!
  number: String!
}

# Autogenerated return type of UpdateUserLufthansaAccount
type UpdateUserLufthansaAccountPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# Autogenerated input type of UpdateUserPassword
input UpdateUserPasswordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  current_password: String!
  password: String!
  password_confirmation: String!
}

# Autogenerated return type of UpdateUserPassword
type UpdateUserPasswordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: Hash
  me: User
}

# A HackerOne user
type User implements Node & ResourceInterface {
  _id: ID!
  account_recovery_phone_number: String
  account_recovery_phone_number_sent_at: DateTime
  account_recovery_phone_number_verified_at: DateTime
  account_recovery_unverified_phone_number: String
  address: Address
  anc_triager: Boolean
  authentication_service: AuthenticationServiceEnum!
  badges(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BadgesUsersConnection
  bio: String
  blacklisted_from_hacker_publish: Boolean!
  bounties(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    currency: CurrencyCode = null

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BountyConnection
  created_at: DateTime!
  demo_hacker: Boolean!
  disabled: Boolean!
  duplicate_users(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  edit_unclaimed_profiles: Boolean
  email: String
  facebook_user_id: String
  facebook_user_name: String
  fb_auth_supported: Boolean
  features: [Feature]
  hacker_invitations_profile: HackerInvitationsProfile
  hackerone_triager: Boolean
  i_can_update_invitation_profile: Boolean
  i_can_update_username: Boolean
  id: ID!
  impact: Float
  impact_percentile: Float
  invitation_preference: InvitationPreferenceTypeEnum
  invitation_queues(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: String = null

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): InvitationQueueConnection
  location: String
  lufthansa_account: LufthansaAccount
  member_of_verified_team: Boolean
  membership(team_handle: String!): TeamMember
  memberships(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: MembershipOrder = {field: TEAM_NAME, direction: ASC}
    team_handles: [String] = []
  ): TeamMemberConnection
  name: String
  new_feature_notification: NewFeatureNotification
  next_update_username_date: String
  otp_backup_codes: [String]
  payout_preferences: [PayoutPreferenceUnion]
  profile_picture(size: ProfilePictureSizes!): String!
  profile_pictures: Hash!
  program_health_acknowledgements(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    throttle_time: Int
  ): ProgramHealthAcknowledgementConnection
  rank: Int
  remaining_reports(team_handle: String!): Int
  report_retest_users(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    completed: Boolean

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ReportRetestUserConnection
  reports(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    database_id: Int = null
    filter: ReportFilterInput

    # Returns the first _n_ elements from the list.
    first: Int
    hackerone_hacker_submissions: Boolean = false
    handle: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    limit: Int = null
    order_by: ReportOrderInput = {direction: DESC, field: id}

    # Relay classic does not have support for starting paginationsomewhere in the
    # middle, see https://github.com/facebook/relay/issues/1312 Workaround is to
    # add a page argument till Relay supports this
    page: Int = null
    pre_submission_review_states: [ReportPreSubmissionReviewStateEnum] = null
    state: ReportStateEnum
    substate: ReportStateEnum
    triage_dashboard: Boolean = false
    triage_dashboard_tab: String = null
    where: FiltersReportFilterRootInput
    without_scope: Boolean = null
  ): ReportConnection
  reputation: Int
  saml_enabled: Boolean
  sessions(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserSessionConnectionType
  signal: Float
  signal_percentile: Float
  soft_launch_invitations(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: InvitationOrderInput
    state: [InvitationStateEnum] = null
    team_handle: String = null
  ): SoftLaunchConnection
  swag(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SwagConnection
  tax_form: TaxForm
  teams(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamOrderInput
    permissions: [PermissionEnum] = []
    search: String
    where: FiltersTeamFilterRootInput
  ): TeamConnection
  totp_enabled: Boolean
  totp_supported: Boolean
  triage_user: Boolean
  tshirt_size: TshirtSizeEnum
  unconfirmed_email: String
  url: URI!
  username: String!
  vpn_credentials: [VpnCredential]
  vpn_instances: [VpnInstance]
  website: String
  whitelisted_teams(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: TeamOrderInput
    permissions: [PermissionEnum] = []
    search: String
    where: FiltersTeamFilterRootInput
  ): WhitelistedTeamConnection
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User
}

# Fields on which a collection of users can be ordered
enum UserOrderField {
  reputation
  username
}

input UserOrderInput {
  direction: OrderDirection!
  field: UserOrderField!
}

# A HackerOne user's session history
type UserSession implements Node {
  _id: ID!
  abbreviated_user_agent: String
  country: UserSessionCountry
  created_at: DateTime!
  current: Boolean!
  deactivated_at: DateTime
  device_type: String
  id: ID!
  ip_address: String
  session_last_used_at: String
  user_agent: String
}

# The connection type for UserSession.
type UserSessionConnectionType {
  # A list of edges.
  edges: [UserSessionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# Country of a HackerOne user's session
type UserSessionCountry implements Node {
  abbreviation: String
  flag: String
  id: ID!
  name: String
}

# An edge in a connection.
type UserSessionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: UserSession
}

# Autogenerated input type of VerifyAccountRecoveryPhoneNumber
input VerifyAccountRecoveryPhoneNumberInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  otp_code: String
  verification_code: String!
}

# Autogenerated return type of VerifyAccountRecoveryPhoneNumber
type VerifyAccountRecoveryPhoneNumberPayload implements MutationResult {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors(types: [ErrorTypeEnum]): ErrorConnection!
  me: User
  was_successful: Boolean!
}

# VPN Credential for a user
type VpnCredential implements Node {
  id: ID!
  name: String
  state: String
}

# VPN Instance for a user
type VpnInstance implements Node {
  id: ID!
  state: String
}

# The type of vulnerability on a HackerOne report
type Weakness implements Node {
  _id: ID!
  clusters(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    id: ID

    # Returns the last _n_ elements from the list.
    last: Int
    order_by: ClusterOrder = {direction: ASC, field: BROWSING_FRIENDLY}
  ): ClusterConnection
  created_at: DateTime!
  description: String
  external_id: String
  id: ID!
  name: String!
  updated_at: DateTime!
}

input WeaknessOrder {
  direction: OrderDirection!
  field: WeaknessOrderField!
}

# Fields on which a collection of weaknesses can be ordered
enum WeaknessOrderField {
  name
}

# The connection type for User.
type WhitelistedHackerConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# The connection type for Team.
type WhitelistedTeamConnection {
  # A list of edges.
  edges: [WhitelistedTeamInformationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  total_count: Int!
}

# An edge in a connection.
type WhitelistedTeamInformationEdge {
  # The participant's total bounty earned within the team
  bounty_earned: Float

  # A cursor for use in pagination.
  cursor: String!

  # The participant's date of accepted the teams invitation
  last_invitation_accepted_at: DateTime

  # The item at the end of the edge.
  node: Team

  # The participant's number of reports within the team
  number_of_reports: Int

  # The participant's number of valid reports within the team
  number_of_valid_reports: Int
}